// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Reads.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace goby {

namespace {

const ::google::protobuf::Descriptor* ReadCollection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadCollection_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadEntry_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Reads_2eproto() {
  protobuf_AddDesc_Reads_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Reads.proto");
  GOOGLE_CHECK(file != NULL);
  ReadCollection_descriptor_ = file->message_type(0);
  static const int ReadCollection_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadCollection, reads_),
  };
  ReadCollection_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReadCollection_descriptor_,
      ReadCollection::default_instance_,
      ReadCollection_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadCollection, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadCollection, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReadCollection));
  ReadEntry_descriptor_ = file->message_type(1);
  static const int ReadEntry_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadEntry, readindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadEntry, readidentifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadEntry, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadEntry, readlength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadEntry, sequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadEntry, qualityscores_),
  };
  ReadEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReadEntry_descriptor_,
      ReadEntry::default_instance_,
      ReadEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReadEntry));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Reads_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReadCollection_descriptor_, &ReadCollection::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReadEntry_descriptor_, &ReadEntry::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Reads_2eproto() {
  delete ReadCollection::default_instance_;
  delete ReadCollection_reflection_;
  delete ReadEntry::default_instance_;
  delete ReadEntry_reflection_;
}

void protobuf_AddDesc_Reads_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013Reads.proto\022\004goby\"0\n\016ReadCollection\022\036\n"
    "\005reads\030\001 \003(\0132\017.goby.ReadEntry\"\210\001\n\tReadEn"
    "try\022\021\n\treadIndex\030\001 \002(\r\022\026\n\016readIdentifier"
    "\030\027 \001(\t\022\023\n\013description\030\026 \001(\t\022\022\n\nreadLengt"
    "h\030\002 \002(\r\022\020\n\010sequence\030\003 \001(\014\022\025\n\rqualityScor"
    "es\030\004 \001(\014B\"\n\036edu.cornell.med.icb.goby.rea"
    "dsH\001", 244);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Reads.proto", &protobuf_RegisterTypes);
  ReadCollection::default_instance_ = new ReadCollection();
  ReadEntry::default_instance_ = new ReadEntry();
  ReadCollection::default_instance_->InitAsDefaultInstance();
  ReadEntry::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Reads_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Reads_2eproto {
  StaticDescriptorInitializer_Reads_2eproto() {
    protobuf_AddDesc_Reads_2eproto();
  }
} static_descriptor_initializer_Reads_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int ReadCollection::kReadsFieldNumber;
#endif  // !_MSC_VER

ReadCollection::ReadCollection()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReadCollection::InitAsDefaultInstance() {
}

ReadCollection::ReadCollection(const ReadCollection& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReadCollection::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReadCollection::~ReadCollection() {
  SharedDtor();
}

void ReadCollection::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReadCollection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadCollection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadCollection_descriptor_;
}

const ReadCollection& ReadCollection::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Reads_2eproto();  return *default_instance_;
}

ReadCollection* ReadCollection::default_instance_ = NULL;

ReadCollection* ReadCollection::New() const {
  return new ReadCollection;
}

void ReadCollection::Clear() {
  reads_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReadCollection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .goby.ReadEntry reads = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reads:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reads()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_reads;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReadCollection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .goby.ReadEntry reads = 1;
  for (int i = 0; i < this->reads_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->reads(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReadCollection::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .goby.ReadEntry reads = 1;
  for (int i = 0; i < this->reads_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->reads(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReadCollection::ByteSize() const {
  int total_size = 0;
  
  // repeated .goby.ReadEntry reads = 1;
  total_size += 1 * this->reads_size();
  for (int i = 0; i < this->reads_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reads(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadCollection::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReadCollection* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReadCollection*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReadCollection::MergeFrom(const ReadCollection& from) {
  GOOGLE_CHECK_NE(&from, this);
  reads_.MergeFrom(from.reads_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReadCollection::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadCollection::CopyFrom(const ReadCollection& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadCollection::IsInitialized() const {
  
  for (int i = 0; i < reads_size(); i++) {
    if (!this->reads(i).IsInitialized()) return false;
  }
  return true;
}

void ReadCollection::Swap(ReadCollection* other) {
  if (other != this) {
    reads_.Swap(&other->reads_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReadCollection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadCollection_descriptor_;
  metadata.reflection = ReadCollection_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string ReadEntry::_default_readidentifier_;
const ::std::string ReadEntry::_default_description_;
const ::std::string ReadEntry::_default_sequence_;
const ::std::string ReadEntry::_default_qualityscores_;
#ifndef _MSC_VER
const int ReadEntry::kReadIndexFieldNumber;
const int ReadEntry::kReadIdentifierFieldNumber;
const int ReadEntry::kDescriptionFieldNumber;
const int ReadEntry::kReadLengthFieldNumber;
const int ReadEntry::kSequenceFieldNumber;
const int ReadEntry::kQualityScoresFieldNumber;
#endif  // !_MSC_VER

ReadEntry::ReadEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReadEntry::InitAsDefaultInstance() {
}

ReadEntry::ReadEntry(const ReadEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReadEntry::SharedCtor() {
  _cached_size_ = 0;
  readindex_ = 0u;
  readidentifier_ = const_cast< ::std::string*>(&_default_readidentifier_);
  description_ = const_cast< ::std::string*>(&_default_description_);
  readlength_ = 0u;
  sequence_ = const_cast< ::std::string*>(&_default_sequence_);
  qualityscores_ = const_cast< ::std::string*>(&_default_qualityscores_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReadEntry::~ReadEntry() {
  SharedDtor();
}

void ReadEntry::SharedDtor() {
  if (readidentifier_ != &_default_readidentifier_) {
    delete readidentifier_;
  }
  if (description_ != &_default_description_) {
    delete description_;
  }
  if (sequence_ != &_default_sequence_) {
    delete sequence_;
  }
  if (qualityscores_ != &_default_qualityscores_) {
    delete qualityscores_;
  }
  if (this != default_instance_) {
  }
}

void ReadEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadEntry_descriptor_;
}

const ReadEntry& ReadEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Reads_2eproto();  return *default_instance_;
}

ReadEntry* ReadEntry::default_instance_ = NULL;

ReadEntry* ReadEntry::New() const {
  return new ReadEntry;
}

void ReadEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    readindex_ = 0u;
    if (_has_bit(1)) {
      if (readidentifier_ != &_default_readidentifier_) {
        readidentifier_->clear();
      }
    }
    if (_has_bit(2)) {
      if (description_ != &_default_description_) {
        description_->clear();
      }
    }
    readlength_ = 0u;
    if (_has_bit(4)) {
      if (sequence_ != &_default_sequence_) {
        sequence_->clear();
      }
    }
    if (_has_bit(5)) {
      if (qualityscores_ != &_default_qualityscores_) {
        qualityscores_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReadEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 readIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &readindex_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_readLength;
        break;
      }
      
      // required uint32 readLength = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_readLength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &readlength_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sequence;
        break;
      }
      
      // optional bytes sequence = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sequence:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sequence()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_qualityScores;
        break;
      }
      
      // optional bytes qualityScores = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_qualityScores:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_qualityscores()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_description;
        break;
      }
      
      // optional string description = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_readIdentifier;
        break;
      }
      
      // optional string readIdentifier = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_readIdentifier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_readidentifier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->readidentifier().data(), this->readidentifier().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReadEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 readIndex = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->readindex(), output);
  }
  
  // required uint32 readLength = 2;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->readlength(), output);
  }
  
  // optional bytes sequence = 3;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->sequence(), output);
  }
  
  // optional bytes qualityScores = 4;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->qualityscores(), output);
  }
  
  // optional string description = 22;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->description(), output);
  }
  
  // optional string readIdentifier = 23;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->readidentifier().data(), this->readidentifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      23, this->readidentifier(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReadEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 readIndex = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->readindex(), target);
  }
  
  // required uint32 readLength = 2;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->readlength(), target);
  }
  
  // optional bytes sequence = 3;
  if (_has_bit(4)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->sequence(), target);
  }
  
  // optional bytes qualityScores = 4;
  if (_has_bit(5)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->qualityscores(), target);
  }
  
  // optional string description = 22;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->description(), target);
  }
  
  // optional string readIdentifier = 23;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->readidentifier().data(), this->readidentifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->readidentifier(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReadEntry::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 readIndex = 1;
    if (has_readindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->readindex());
    }
    
    // optional string readIdentifier = 23;
    if (has_readidentifier()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->readidentifier());
    }
    
    // optional string description = 22;
    if (has_description()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }
    
    // required uint32 readLength = 2;
    if (has_readlength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->readlength());
    }
    
    // optional bytes sequence = 3;
    if (has_sequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sequence());
    }
    
    // optional bytes qualityScores = 4;
    if (has_qualityscores()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->qualityscores());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReadEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReadEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReadEntry::MergeFrom(const ReadEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_readindex(from.readindex());
    }
    if (from._has_bit(1)) {
      set_readidentifier(from.readidentifier());
    }
    if (from._has_bit(2)) {
      set_description(from.description());
    }
    if (from._has_bit(3)) {
      set_readlength(from.readlength());
    }
    if (from._has_bit(4)) {
      set_sequence(from.sequence());
    }
    if (from._has_bit(5)) {
      set_qualityscores(from.qualityscores());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReadEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadEntry::CopyFrom(const ReadEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;
  
  return true;
}

void ReadEntry::Swap(ReadEntry* other) {
  if (other != this) {
    std::swap(readindex_, other->readindex_);
    std::swap(readidentifier_, other->readidentifier_);
    std::swap(description_, other->description_);
    std::swap(readlength_, other->readlength_);
    std::swap(sequence_, other->sequence_);
    std::swap(qualityscores_, other->qualityscores_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReadEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadEntry_descriptor_;
  metadata.reflection = ReadEntry_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace goby

// @@protoc_insertion_point(global_scope)
