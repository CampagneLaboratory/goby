// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Alignments.proto

#ifndef PROTOBUF_Alignments_2eproto__INCLUDED
#define PROTOBUF_Alignments_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace goby {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Alignments_2eproto();
void protobuf_AssignDesc_Alignments_2eproto();
void protobuf_ShutdownFile_Alignments_2eproto();

class AlignmentCollection;
class AlignmentEntry;
class SequenceVariation;
class AlignmentHeader;
class IdentifierMapping;
class IdentifierInfo;
class AlignmentTooManyHits;
class AmbiguousLocation;
class AlignmentIndex;

// ===================================================================

class AlignmentCollection : public ::google::protobuf::Message {
 public:
  AlignmentCollection();
  virtual ~AlignmentCollection();
  
  AlignmentCollection(const AlignmentCollection& from);
  
  inline AlignmentCollection& operator=(const AlignmentCollection& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AlignmentCollection& default_instance();
  
  void Swap(AlignmentCollection* other);
  
  // implements Message ----------------------------------------------
  
  AlignmentCollection* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AlignmentCollection& from);
  void MergeFrom(const AlignmentCollection& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .goby.AlignmentEntry alignment_entries = 1;
  inline int alignment_entries_size() const;
  inline void clear_alignment_entries();
  static const int kAlignmentEntriesFieldNumber = 1;
  inline const ::goby::AlignmentEntry& alignment_entries(int index) const;
  inline ::goby::AlignmentEntry* mutable_alignment_entries(int index);
  inline ::goby::AlignmentEntry* add_alignment_entries();
  inline const ::google::protobuf::RepeatedPtrField< ::goby::AlignmentEntry >&
      alignment_entries() const;
  inline ::google::protobuf::RepeatedPtrField< ::goby::AlignmentEntry >*
      mutable_alignment_entries();
  
  // @@protoc_insertion_point(class_scope:goby.AlignmentCollection)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::goby::AlignmentEntry > alignment_entries_;
  friend void  protobuf_AddDesc_Alignments_2eproto();
  friend void protobuf_AssignDesc_Alignments_2eproto();
  friend void protobuf_ShutdownFile_Alignments_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static AlignmentCollection* default_instance_;
};
// -------------------------------------------------------------------

class AlignmentEntry : public ::google::protobuf::Message {
 public:
  AlignmentEntry();
  virtual ~AlignmentEntry();
  
  AlignmentEntry(const AlignmentEntry& from);
  
  inline AlignmentEntry& operator=(const AlignmentEntry& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AlignmentEntry& default_instance();
  
  void Swap(AlignmentEntry* other);
  
  // implements Message ----------------------------------------------
  
  AlignmentEntry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AlignmentEntry& from);
  void MergeFrom(const AlignmentEntry& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 multiplicity = 7;
  inline bool has_multiplicity() const;
  inline void clear_multiplicity();
  static const int kMultiplicityFieldNumber = 7;
  inline ::google::protobuf::uint32 multiplicity() const;
  inline void set_multiplicity(::google::protobuf::uint32 value);
  
  // required uint32 query_index = 1;
  inline bool has_query_index() const;
  inline void clear_query_index();
  static const int kQueryIndexFieldNumber = 1;
  inline ::google::protobuf::uint32 query_index() const;
  inline void set_query_index(::google::protobuf::uint32 value);
  
  // required uint32 target_index = 2;
  inline bool has_target_index() const;
  inline void clear_target_index();
  static const int kTargetIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 target_index() const;
  inline void set_target_index(::google::protobuf::uint32 value);
  
  // required uint32 position = 3;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 3;
  inline ::google::protobuf::uint32 position() const;
  inline void set_position(::google::protobuf::uint32 value);
  
  // required bool matching_reverse_strand = 6;
  inline bool has_matching_reverse_strand() const;
  inline void clear_matching_reverse_strand();
  static const int kMatchingReverseStrandFieldNumber = 6;
  inline bool matching_reverse_strand() const;
  inline void set_matching_reverse_strand(bool value);
  
  // optional uint32 query_position = 5;
  inline bool has_query_position() const;
  inline void clear_query_position();
  static const int kQueryPositionFieldNumber = 5;
  inline ::google::protobuf::uint32 query_position() const;
  inline void set_query_position(::google::protobuf::uint32 value);
  
  // optional float score = 4;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 4;
  inline float score() const;
  inline void set_score(float value);
  
  // optional uint32 number_of_mismatches = 8;
  inline bool has_number_of_mismatches() const;
  inline void clear_number_of_mismatches();
  static const int kNumberOfMismatchesFieldNumber = 8;
  inline ::google::protobuf::uint32 number_of_mismatches() const;
  inline void set_number_of_mismatches(::google::protobuf::uint32 value);
  
  // optional uint32 number_of_indels = 9;
  inline bool has_number_of_indels() const;
  inline void clear_number_of_indels();
  static const int kNumberOfIndelsFieldNumber = 9;
  inline ::google::protobuf::uint32 number_of_indels() const;
  inline void set_number_of_indels(::google::protobuf::uint32 value);
  
  // optional uint32 query_aligned_length = 11;
  inline bool has_query_aligned_length() const;
  inline void clear_query_aligned_length();
  static const int kQueryAlignedLengthFieldNumber = 11;
  inline ::google::protobuf::uint32 query_aligned_length() const;
  inline void set_query_aligned_length(::google::protobuf::uint32 value);
  
  // optional uint32 target_aligned_length = 12;
  inline bool has_target_aligned_length() const;
  inline void clear_target_aligned_length();
  static const int kTargetAlignedLengthFieldNumber = 12;
  inline ::google::protobuf::uint32 target_aligned_length() const;
  inline void set_target_aligned_length(::google::protobuf::uint32 value);
  
  // repeated .goby.SequenceVariation sequence_variations = 13;
  inline int sequence_variations_size() const;
  inline void clear_sequence_variations();
  static const int kSequenceVariationsFieldNumber = 13;
  inline const ::goby::SequenceVariation& sequence_variations(int index) const;
  inline ::goby::SequenceVariation* mutable_sequence_variations(int index);
  inline ::goby::SequenceVariation* add_sequence_variations();
  inline const ::google::protobuf::RepeatedPtrField< ::goby::SequenceVariation >&
      sequence_variations() const;
  inline ::google::protobuf::RepeatedPtrField< ::goby::SequenceVariation >*
      mutable_sequence_variations();
  
  // optional uint32 query_length = 10;
  inline bool has_query_length() const;
  inline void clear_query_length();
  static const int kQueryLengthFieldNumber = 10;
  inline ::google::protobuf::uint32 query_length() const;
  inline void set_query_length(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:goby.AlignmentEntry)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 multiplicity_;
  ::google::protobuf::uint32 query_index_;
  ::google::protobuf::uint32 target_index_;
  ::google::protobuf::uint32 position_;
  bool matching_reverse_strand_;
  ::google::protobuf::uint32 query_position_;
  float score_;
  ::google::protobuf::uint32 number_of_mismatches_;
  ::google::protobuf::uint32 number_of_indels_;
  ::google::protobuf::uint32 query_aligned_length_;
  ::google::protobuf::uint32 target_aligned_length_;
  ::google::protobuf::RepeatedPtrField< ::goby::SequenceVariation > sequence_variations_;
  ::google::protobuf::uint32 query_length_;
  friend void  protobuf_AddDesc_Alignments_2eproto();
  friend void protobuf_AssignDesc_Alignments_2eproto();
  friend void protobuf_ShutdownFile_Alignments_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static AlignmentEntry* default_instance_;
};
// -------------------------------------------------------------------

class SequenceVariation : public ::google::protobuf::Message {
 public:
  SequenceVariation();
  virtual ~SequenceVariation();
  
  SequenceVariation(const SequenceVariation& from);
  
  inline SequenceVariation& operator=(const SequenceVariation& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SequenceVariation& default_instance();
  
  void Swap(SequenceVariation* other);
  
  // implements Message ----------------------------------------------
  
  SequenceVariation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SequenceVariation& from);
  void MergeFrom(const SequenceVariation& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string from = 2;
  inline bool has_from() const;
  inline void clear_from();
  static const int kFromFieldNumber = 2;
  inline const ::std::string& from() const;
  inline void set_from(const ::std::string& value);
  inline void set_from(const char* value);
  inline void set_from(const char* value, size_t size);
  inline ::std::string* mutable_from();
  
  // required string to = 1;
  inline bool has_to() const;
  inline void clear_to();
  static const int kToFieldNumber = 1;
  inline const ::std::string& to() const;
  inline void set_to(const ::std::string& value);
  inline void set_to(const char* value);
  inline void set_to(const char* value, size_t size);
  inline ::std::string* mutable_to();
  
  // required uint32 position = 3;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 3;
  inline ::google::protobuf::uint32 position() const;
  inline void set_position(::google::protobuf::uint32 value);
  
  // required uint32 read_index = 5;
  inline bool has_read_index() const;
  inline void clear_read_index();
  static const int kReadIndexFieldNumber = 5;
  inline ::google::protobuf::uint32 read_index() const;
  inline void set_read_index(::google::protobuf::uint32 value);
  
  // optional bytes to_quality = 4;
  inline bool has_to_quality() const;
  inline void clear_to_quality();
  static const int kToQualityFieldNumber = 4;
  inline const ::std::string& to_quality() const;
  inline void set_to_quality(const ::std::string& value);
  inline void set_to_quality(const char* value);
  inline void set_to_quality(const void* value, size_t size);
  inline ::std::string* mutable_to_quality();
  
  // @@protoc_insertion_point(class_scope:goby.SequenceVariation)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* from_;
  static const ::std::string _default_from_;
  ::std::string* to_;
  static const ::std::string _default_to_;
  ::google::protobuf::uint32 position_;
  ::google::protobuf::uint32 read_index_;
  ::std::string* to_quality_;
  static const ::std::string _default_to_quality_;
  friend void  protobuf_AddDesc_Alignments_2eproto();
  friend void protobuf_AssignDesc_Alignments_2eproto();
  friend void protobuf_ShutdownFile_Alignments_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SequenceVariation* default_instance_;
};
// -------------------------------------------------------------------

class AlignmentHeader : public ::google::protobuf::Message {
 public:
  AlignmentHeader();
  virtual ~AlignmentHeader();
  
  AlignmentHeader(const AlignmentHeader& from);
  
  inline AlignmentHeader& operator=(const AlignmentHeader& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AlignmentHeader& default_instance();
  
  void Swap(AlignmentHeader* other);
  
  // implements Message ----------------------------------------------
  
  AlignmentHeader* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AlignmentHeader& from);
  void MergeFrom(const AlignmentHeader& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 smallest_split_query_index = 9;
  inline bool has_smallest_split_query_index() const;
  inline void clear_smallest_split_query_index();
  static const int kSmallestSplitQueryIndexFieldNumber = 9;
  inline ::google::protobuf::uint32 smallest_split_query_index() const;
  inline void set_smallest_split_query_index(::google::protobuf::uint32 value);
  
  // optional uint32 largest_split_query_index = 11;
  inline bool has_largest_split_query_index() const;
  inline void clear_largest_split_query_index();
  static const int kLargestSplitQueryIndexFieldNumber = 11;
  inline ::google::protobuf::uint32 largest_split_query_index() const;
  inline void set_largest_split_query_index(::google::protobuf::uint32 value);
  
  // optional .goby.IdentifierMapping query_name_mapping = 1;
  inline bool has_query_name_mapping() const;
  inline void clear_query_name_mapping();
  static const int kQueryNameMappingFieldNumber = 1;
  inline const ::goby::IdentifierMapping& query_name_mapping() const;
  inline ::goby::IdentifierMapping* mutable_query_name_mapping();
  
  // optional .goby.IdentifierMapping target_name_mapping = 2;
  inline bool has_target_name_mapping() const;
  inline void clear_target_name_mapping();
  static const int kTargetNameMappingFieldNumber = 2;
  inline const ::goby::IdentifierMapping& target_name_mapping() const;
  inline ::goby::IdentifierMapping* mutable_target_name_mapping();
  
  // optional uint32 number_of_queries = 5;
  inline bool has_number_of_queries() const;
  inline void clear_number_of_queries();
  static const int kNumberOfQueriesFieldNumber = 5;
  inline ::google::protobuf::uint32 number_of_queries() const;
  inline void set_number_of_queries(::google::protobuf::uint32 value);
  
  // optional uint32 number_of_targets = 6;
  inline bool has_number_of_targets() const;
  inline void clear_number_of_targets();
  static const int kNumberOfTargetsFieldNumber = 6;
  inline ::google::protobuf::uint32 number_of_targets() const;
  inline void set_number_of_targets(::google::protobuf::uint32 value);
  
  // optional uint32 number_of_aligned_reads = 7;
  inline bool has_number_of_aligned_reads() const;
  inline void clear_number_of_aligned_reads();
  static const int kNumberOfAlignedReadsFieldNumber = 7;
  inline ::google::protobuf::uint32 number_of_aligned_reads() const;
  inline void set_number_of_aligned_reads(::google::protobuf::uint32 value);
  
  // repeated uint32 query_length = 3 [deprecated = true];
  inline int query_length_size() const PROTOBUF_DEPRECATED;
  inline void clear_query_length() PROTOBUF_DEPRECATED;
  static const int kQueryLengthFieldNumber = 3;
  inline ::google::protobuf::uint32 query_length(int index) const PROTOBUF_DEPRECATED;
  inline void set_query_length(int index, ::google::protobuf::uint32 value) PROTOBUF_DEPRECATED;
  inline void add_query_length(::google::protobuf::uint32 value) PROTOBUF_DEPRECATED;
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      query_length() const PROTOBUF_DEPRECATED;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_query_length() PROTOBUF_DEPRECATED;
  
  // optional uint32 constant_query_length = 10;
  inline bool has_constant_query_length() const;
  inline void clear_constant_query_length();
  static const int kConstantQueryLengthFieldNumber = 10;
  inline ::google::protobuf::uint32 constant_query_length() const;
  inline void set_constant_query_length(::google::protobuf::uint32 value);
  
  // repeated uint32 target_length = 8;
  inline int target_length_size() const;
  inline void clear_target_length();
  static const int kTargetLengthFieldNumber = 8;
  inline ::google::protobuf::uint32 target_length(int index) const;
  inline void set_target_length(int index, ::google::protobuf::uint32 value);
  inline void add_target_length(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      target_length() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_target_length();
  
  // optional bool sorted = 13;
  inline bool has_sorted() const;
  inline void clear_sorted();
  static const int kSortedFieldNumber = 13;
  inline bool sorted() const;
  inline void set_sorted(bool value);
  
  // optional bool indexed = 14;
  inline bool has_indexed() const;
  inline void clear_indexed();
  static const int kIndexedFieldNumber = 14;
  inline bool indexed() const;
  inline void set_indexed(bool value);
  
  // optional bool query_lengths_stored_in_entries = 15;
  inline bool has_query_lengths_stored_in_entries() const;
  inline void clear_query_lengths_stored_in_entries();
  static const int kQueryLengthsStoredInEntriesFieldNumber = 15;
  inline bool query_lengths_stored_in_entries() const;
  inline void set_query_lengths_stored_in_entries(bool value);
  
  // @@protoc_insertion_point(class_scope:goby.AlignmentHeader)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 smallest_split_query_index_;
  ::google::protobuf::uint32 largest_split_query_index_;
  ::goby::IdentifierMapping* query_name_mapping_;
  ::goby::IdentifierMapping* target_name_mapping_;
  ::google::protobuf::uint32 number_of_queries_;
  ::google::protobuf::uint32 number_of_targets_;
  ::google::protobuf::uint32 number_of_aligned_reads_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > query_length_;
  ::google::protobuf::uint32 constant_query_length_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > target_length_;
  bool sorted_;
  bool indexed_;
  bool query_lengths_stored_in_entries_;
  friend void  protobuf_AddDesc_Alignments_2eproto();
  friend void protobuf_AssignDesc_Alignments_2eproto();
  friend void protobuf_ShutdownFile_Alignments_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static AlignmentHeader* default_instance_;
};
// -------------------------------------------------------------------

class IdentifierMapping : public ::google::protobuf::Message {
 public:
  IdentifierMapping();
  virtual ~IdentifierMapping();
  
  IdentifierMapping(const IdentifierMapping& from);
  
  inline IdentifierMapping& operator=(const IdentifierMapping& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const IdentifierMapping& default_instance();
  
  void Swap(IdentifierMapping* other);
  
  // implements Message ----------------------------------------------
  
  IdentifierMapping* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IdentifierMapping& from);
  void MergeFrom(const IdentifierMapping& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .goby.IdentifierInfo mappings = 1;
  inline int mappings_size() const;
  inline void clear_mappings();
  static const int kMappingsFieldNumber = 1;
  inline const ::goby::IdentifierInfo& mappings(int index) const;
  inline ::goby::IdentifierInfo* mutable_mappings(int index);
  inline ::goby::IdentifierInfo* add_mappings();
  inline const ::google::protobuf::RepeatedPtrField< ::goby::IdentifierInfo >&
      mappings() const;
  inline ::google::protobuf::RepeatedPtrField< ::goby::IdentifierInfo >*
      mutable_mappings();
  
  // @@protoc_insertion_point(class_scope:goby.IdentifierMapping)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::goby::IdentifierInfo > mappings_;
  friend void  protobuf_AddDesc_Alignments_2eproto();
  friend void protobuf_AssignDesc_Alignments_2eproto();
  friend void protobuf_ShutdownFile_Alignments_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static IdentifierMapping* default_instance_;
};
// -------------------------------------------------------------------

class IdentifierInfo : public ::google::protobuf::Message {
 public:
  IdentifierInfo();
  virtual ~IdentifierInfo();
  
  IdentifierInfo(const IdentifierInfo& from);
  
  inline IdentifierInfo& operator=(const IdentifierInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const IdentifierInfo& default_instance();
  
  void Swap(IdentifierInfo* other);
  
  // implements Message ----------------------------------------------
  
  IdentifierInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IdentifierInfo& from);
  void MergeFrom(const IdentifierInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  
  // required uint32 index = 2;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:goby.IdentifierInfo)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* name_;
  static const ::std::string _default_name_;
  ::google::protobuf::uint32 index_;
  friend void  protobuf_AddDesc_Alignments_2eproto();
  friend void protobuf_AssignDesc_Alignments_2eproto();
  friend void protobuf_ShutdownFile_Alignments_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static IdentifierInfo* default_instance_;
};
// -------------------------------------------------------------------

class AlignmentTooManyHits : public ::google::protobuf::Message {
 public:
  AlignmentTooManyHits();
  virtual ~AlignmentTooManyHits();
  
  AlignmentTooManyHits(const AlignmentTooManyHits& from);
  
  inline AlignmentTooManyHits& operator=(const AlignmentTooManyHits& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AlignmentTooManyHits& default_instance();
  
  void Swap(AlignmentTooManyHits* other);
  
  // implements Message ----------------------------------------------
  
  AlignmentTooManyHits* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AlignmentTooManyHits& from);
  void MergeFrom(const AlignmentTooManyHits& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 aligner_threshold = 2;
  inline bool has_aligner_threshold() const;
  inline void clear_aligner_threshold();
  static const int kAlignerThresholdFieldNumber = 2;
  inline ::google::protobuf::uint32 aligner_threshold() const;
  inline void set_aligner_threshold(::google::protobuf::uint32 value);
  
  // repeated .goby.AmbiguousLocation hits = 1;
  inline int hits_size() const;
  inline void clear_hits();
  static const int kHitsFieldNumber = 1;
  inline const ::goby::AmbiguousLocation& hits(int index) const;
  inline ::goby::AmbiguousLocation* mutable_hits(int index);
  inline ::goby::AmbiguousLocation* add_hits();
  inline const ::google::protobuf::RepeatedPtrField< ::goby::AmbiguousLocation >&
      hits() const;
  inline ::google::protobuf::RepeatedPtrField< ::goby::AmbiguousLocation >*
      mutable_hits();
  
  // @@protoc_insertion_point(class_scope:goby.AlignmentTooManyHits)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 aligner_threshold_;
  ::google::protobuf::RepeatedPtrField< ::goby::AmbiguousLocation > hits_;
  friend void  protobuf_AddDesc_Alignments_2eproto();
  friend void protobuf_AssignDesc_Alignments_2eproto();
  friend void protobuf_ShutdownFile_Alignments_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static AlignmentTooManyHits* default_instance_;
};
// -------------------------------------------------------------------

class AmbiguousLocation : public ::google::protobuf::Message {
 public:
  AmbiguousLocation();
  virtual ~AmbiguousLocation();
  
  AmbiguousLocation(const AmbiguousLocation& from);
  
  inline AmbiguousLocation& operator=(const AmbiguousLocation& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AmbiguousLocation& default_instance();
  
  void Swap(AmbiguousLocation* other);
  
  // implements Message ----------------------------------------------
  
  AmbiguousLocation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AmbiguousLocation& from);
  void MergeFrom(const AmbiguousLocation& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 query_index = 1;
  inline bool has_query_index() const;
  inline void clear_query_index();
  static const int kQueryIndexFieldNumber = 1;
  inline ::google::protobuf::uint32 query_index() const;
  inline void set_query_index(::google::protobuf::uint32 value);
  
  // required uint32 at_least_number_of_hits = 2;
  inline bool has_at_least_number_of_hits() const;
  inline void clear_at_least_number_of_hits();
  static const int kAtLeastNumberOfHitsFieldNumber = 2;
  inline ::google::protobuf::uint32 at_least_number_of_hits() const;
  inline void set_at_least_number_of_hits(::google::protobuf::uint32 value);
  
  // optional uint32 length_of_match = 3;
  inline bool has_length_of_match() const;
  inline void clear_length_of_match();
  static const int kLengthOfMatchFieldNumber = 3;
  inline ::google::protobuf::uint32 length_of_match() const;
  inline void set_length_of_match(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:goby.AmbiguousLocation)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 query_index_;
  ::google::protobuf::uint32 at_least_number_of_hits_;
  ::google::protobuf::uint32 length_of_match_;
  friend void  protobuf_AddDesc_Alignments_2eproto();
  friend void protobuf_AssignDesc_Alignments_2eproto();
  friend void protobuf_ShutdownFile_Alignments_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static AmbiguousLocation* default_instance_;
};
// -------------------------------------------------------------------

class AlignmentIndex : public ::google::protobuf::Message {
 public:
  AlignmentIndex();
  virtual ~AlignmentIndex();
  
  AlignmentIndex(const AlignmentIndex& from);
  
  inline AlignmentIndex& operator=(const AlignmentIndex& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AlignmentIndex& default_instance();
  
  void Swap(AlignmentIndex* other);
  
  // implements Message ----------------------------------------------
  
  AlignmentIndex* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AlignmentIndex& from);
  void MergeFrom(const AlignmentIndex& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated uint32 target_position_offsets = 1 [packed = true];
  inline int target_position_offsets_size() const;
  inline void clear_target_position_offsets();
  static const int kTargetPositionOffsetsFieldNumber = 1;
  inline ::google::protobuf::uint32 target_position_offsets(int index) const;
  inline void set_target_position_offsets(int index, ::google::protobuf::uint32 value);
  inline void add_target_position_offsets(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      target_position_offsets() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_target_position_offsets();
  
  // repeated uint64 offsets = 2 [packed = true];
  inline int offsets_size() const;
  inline void clear_offsets();
  static const int kOffsetsFieldNumber = 2;
  inline ::google::protobuf::uint64 offsets(int index) const;
  inline void set_offsets(int index, ::google::protobuf::uint64 value);
  inline void add_offsets(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      offsets() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_offsets();
  
  // repeated uint64 absolute_positions = 3 [packed = true];
  inline int absolute_positions_size() const;
  inline void clear_absolute_positions();
  static const int kAbsolutePositionsFieldNumber = 3;
  inline ::google::protobuf::uint64 absolute_positions(int index) const;
  inline void set_absolute_positions(int index, ::google::protobuf::uint64 value);
  inline void add_absolute_positions(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      absolute_positions() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_absolute_positions();
  
  // @@protoc_insertion_point(class_scope:goby.AlignmentIndex)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > target_position_offsets_;
  mutable int _target_position_offsets_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > offsets_;
  mutable int _offsets_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > absolute_positions_;
  mutable int _absolute_positions_cached_byte_size_;
  friend void  protobuf_AddDesc_Alignments_2eproto();
  friend void protobuf_AssignDesc_Alignments_2eproto();
  friend void protobuf_ShutdownFile_Alignments_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static AlignmentIndex* default_instance_;
};
// ===================================================================


// ===================================================================

// AlignmentCollection

// repeated .goby.AlignmentEntry alignment_entries = 1;
inline int AlignmentCollection::alignment_entries_size() const {
  return alignment_entries_.size();
}
inline void AlignmentCollection::clear_alignment_entries() {
  alignment_entries_.Clear();
}
inline const ::goby::AlignmentEntry& AlignmentCollection::alignment_entries(int index) const {
  return alignment_entries_.Get(index);
}
inline ::goby::AlignmentEntry* AlignmentCollection::mutable_alignment_entries(int index) {
  return alignment_entries_.Mutable(index);
}
inline ::goby::AlignmentEntry* AlignmentCollection::add_alignment_entries() {
  return alignment_entries_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::goby::AlignmentEntry >&
AlignmentCollection::alignment_entries() const {
  return alignment_entries_;
}
inline ::google::protobuf::RepeatedPtrField< ::goby::AlignmentEntry >*
AlignmentCollection::mutable_alignment_entries() {
  return &alignment_entries_;
}

// -------------------------------------------------------------------

// AlignmentEntry

// optional uint32 multiplicity = 7;
inline bool AlignmentEntry::has_multiplicity() const {
  return _has_bit(0);
}
inline void AlignmentEntry::clear_multiplicity() {
  multiplicity_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 AlignmentEntry::multiplicity() const {
  return multiplicity_;
}
inline void AlignmentEntry::set_multiplicity(::google::protobuf::uint32 value) {
  _set_bit(0);
  multiplicity_ = value;
}

// required uint32 query_index = 1;
inline bool AlignmentEntry::has_query_index() const {
  return _has_bit(1);
}
inline void AlignmentEntry::clear_query_index() {
  query_index_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 AlignmentEntry::query_index() const {
  return query_index_;
}
inline void AlignmentEntry::set_query_index(::google::protobuf::uint32 value) {
  _set_bit(1);
  query_index_ = value;
}

// required uint32 target_index = 2;
inline bool AlignmentEntry::has_target_index() const {
  return _has_bit(2);
}
inline void AlignmentEntry::clear_target_index() {
  target_index_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 AlignmentEntry::target_index() const {
  return target_index_;
}
inline void AlignmentEntry::set_target_index(::google::protobuf::uint32 value) {
  _set_bit(2);
  target_index_ = value;
}

// required uint32 position = 3;
inline bool AlignmentEntry::has_position() const {
  return _has_bit(3);
}
inline void AlignmentEntry::clear_position() {
  position_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 AlignmentEntry::position() const {
  return position_;
}
inline void AlignmentEntry::set_position(::google::protobuf::uint32 value) {
  _set_bit(3);
  position_ = value;
}

// required bool matching_reverse_strand = 6;
inline bool AlignmentEntry::has_matching_reverse_strand() const {
  return _has_bit(4);
}
inline void AlignmentEntry::clear_matching_reverse_strand() {
  matching_reverse_strand_ = false;
  _clear_bit(4);
}
inline bool AlignmentEntry::matching_reverse_strand() const {
  return matching_reverse_strand_;
}
inline void AlignmentEntry::set_matching_reverse_strand(bool value) {
  _set_bit(4);
  matching_reverse_strand_ = value;
}

// optional uint32 query_position = 5;
inline bool AlignmentEntry::has_query_position() const {
  return _has_bit(5);
}
inline void AlignmentEntry::clear_query_position() {
  query_position_ = 0u;
  _clear_bit(5);
}
inline ::google::protobuf::uint32 AlignmentEntry::query_position() const {
  return query_position_;
}
inline void AlignmentEntry::set_query_position(::google::protobuf::uint32 value) {
  _set_bit(5);
  query_position_ = value;
}

// optional float score = 4;
inline bool AlignmentEntry::has_score() const {
  return _has_bit(6);
}
inline void AlignmentEntry::clear_score() {
  score_ = 0;
  _clear_bit(6);
}
inline float AlignmentEntry::score() const {
  return score_;
}
inline void AlignmentEntry::set_score(float value) {
  _set_bit(6);
  score_ = value;
}

// optional uint32 number_of_mismatches = 8;
inline bool AlignmentEntry::has_number_of_mismatches() const {
  return _has_bit(7);
}
inline void AlignmentEntry::clear_number_of_mismatches() {
  number_of_mismatches_ = 0u;
  _clear_bit(7);
}
inline ::google::protobuf::uint32 AlignmentEntry::number_of_mismatches() const {
  return number_of_mismatches_;
}
inline void AlignmentEntry::set_number_of_mismatches(::google::protobuf::uint32 value) {
  _set_bit(7);
  number_of_mismatches_ = value;
}

// optional uint32 number_of_indels = 9;
inline bool AlignmentEntry::has_number_of_indels() const {
  return _has_bit(8);
}
inline void AlignmentEntry::clear_number_of_indels() {
  number_of_indels_ = 0u;
  _clear_bit(8);
}
inline ::google::protobuf::uint32 AlignmentEntry::number_of_indels() const {
  return number_of_indels_;
}
inline void AlignmentEntry::set_number_of_indels(::google::protobuf::uint32 value) {
  _set_bit(8);
  number_of_indels_ = value;
}

// optional uint32 query_aligned_length = 11;
inline bool AlignmentEntry::has_query_aligned_length() const {
  return _has_bit(9);
}
inline void AlignmentEntry::clear_query_aligned_length() {
  query_aligned_length_ = 0u;
  _clear_bit(9);
}
inline ::google::protobuf::uint32 AlignmentEntry::query_aligned_length() const {
  return query_aligned_length_;
}
inline void AlignmentEntry::set_query_aligned_length(::google::protobuf::uint32 value) {
  _set_bit(9);
  query_aligned_length_ = value;
}

// optional uint32 target_aligned_length = 12;
inline bool AlignmentEntry::has_target_aligned_length() const {
  return _has_bit(10);
}
inline void AlignmentEntry::clear_target_aligned_length() {
  target_aligned_length_ = 0u;
  _clear_bit(10);
}
inline ::google::protobuf::uint32 AlignmentEntry::target_aligned_length() const {
  return target_aligned_length_;
}
inline void AlignmentEntry::set_target_aligned_length(::google::protobuf::uint32 value) {
  _set_bit(10);
  target_aligned_length_ = value;
}

// repeated .goby.SequenceVariation sequence_variations = 13;
inline int AlignmentEntry::sequence_variations_size() const {
  return sequence_variations_.size();
}
inline void AlignmentEntry::clear_sequence_variations() {
  sequence_variations_.Clear();
}
inline const ::goby::SequenceVariation& AlignmentEntry::sequence_variations(int index) const {
  return sequence_variations_.Get(index);
}
inline ::goby::SequenceVariation* AlignmentEntry::mutable_sequence_variations(int index) {
  return sequence_variations_.Mutable(index);
}
inline ::goby::SequenceVariation* AlignmentEntry::add_sequence_variations() {
  return sequence_variations_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::goby::SequenceVariation >&
AlignmentEntry::sequence_variations() const {
  return sequence_variations_;
}
inline ::google::protobuf::RepeatedPtrField< ::goby::SequenceVariation >*
AlignmentEntry::mutable_sequence_variations() {
  return &sequence_variations_;
}

// optional uint32 query_length = 10;
inline bool AlignmentEntry::has_query_length() const {
  return _has_bit(12);
}
inline void AlignmentEntry::clear_query_length() {
  query_length_ = 0u;
  _clear_bit(12);
}
inline ::google::protobuf::uint32 AlignmentEntry::query_length() const {
  return query_length_;
}
inline void AlignmentEntry::set_query_length(::google::protobuf::uint32 value) {
  _set_bit(12);
  query_length_ = value;
}

// -------------------------------------------------------------------

// SequenceVariation

// required string from = 2;
inline bool SequenceVariation::has_from() const {
  return _has_bit(0);
}
inline void SequenceVariation::clear_from() {
  if (from_ != &_default_from_) {
    from_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& SequenceVariation::from() const {
  return *from_;
}
inline void SequenceVariation::set_from(const ::std::string& value) {
  _set_bit(0);
  if (from_ == &_default_from_) {
    from_ = new ::std::string;
  }
  from_->assign(value);
}
inline void SequenceVariation::set_from(const char* value) {
  _set_bit(0);
  if (from_ == &_default_from_) {
    from_ = new ::std::string;
  }
  from_->assign(value);
}
inline void SequenceVariation::set_from(const char* value, size_t size) {
  _set_bit(0);
  if (from_ == &_default_from_) {
    from_ = new ::std::string;
  }
  from_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SequenceVariation::mutable_from() {
  _set_bit(0);
  if (from_ == &_default_from_) {
    from_ = new ::std::string;
  }
  return from_;
}

// required string to = 1;
inline bool SequenceVariation::has_to() const {
  return _has_bit(1);
}
inline void SequenceVariation::clear_to() {
  if (to_ != &_default_to_) {
    to_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& SequenceVariation::to() const {
  return *to_;
}
inline void SequenceVariation::set_to(const ::std::string& value) {
  _set_bit(1);
  if (to_ == &_default_to_) {
    to_ = new ::std::string;
  }
  to_->assign(value);
}
inline void SequenceVariation::set_to(const char* value) {
  _set_bit(1);
  if (to_ == &_default_to_) {
    to_ = new ::std::string;
  }
  to_->assign(value);
}
inline void SequenceVariation::set_to(const char* value, size_t size) {
  _set_bit(1);
  if (to_ == &_default_to_) {
    to_ = new ::std::string;
  }
  to_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SequenceVariation::mutable_to() {
  _set_bit(1);
  if (to_ == &_default_to_) {
    to_ = new ::std::string;
  }
  return to_;
}

// required uint32 position = 3;
inline bool SequenceVariation::has_position() const {
  return _has_bit(2);
}
inline void SequenceVariation::clear_position() {
  position_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 SequenceVariation::position() const {
  return position_;
}
inline void SequenceVariation::set_position(::google::protobuf::uint32 value) {
  _set_bit(2);
  position_ = value;
}

// required uint32 read_index = 5;
inline bool SequenceVariation::has_read_index() const {
  return _has_bit(3);
}
inline void SequenceVariation::clear_read_index() {
  read_index_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 SequenceVariation::read_index() const {
  return read_index_;
}
inline void SequenceVariation::set_read_index(::google::protobuf::uint32 value) {
  _set_bit(3);
  read_index_ = value;
}

// optional bytes to_quality = 4;
inline bool SequenceVariation::has_to_quality() const {
  return _has_bit(4);
}
inline void SequenceVariation::clear_to_quality() {
  if (to_quality_ != &_default_to_quality_) {
    to_quality_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& SequenceVariation::to_quality() const {
  return *to_quality_;
}
inline void SequenceVariation::set_to_quality(const ::std::string& value) {
  _set_bit(4);
  if (to_quality_ == &_default_to_quality_) {
    to_quality_ = new ::std::string;
  }
  to_quality_->assign(value);
}
inline void SequenceVariation::set_to_quality(const char* value) {
  _set_bit(4);
  if (to_quality_ == &_default_to_quality_) {
    to_quality_ = new ::std::string;
  }
  to_quality_->assign(value);
}
inline void SequenceVariation::set_to_quality(const void* value, size_t size) {
  _set_bit(4);
  if (to_quality_ == &_default_to_quality_) {
    to_quality_ = new ::std::string;
  }
  to_quality_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SequenceVariation::mutable_to_quality() {
  _set_bit(4);
  if (to_quality_ == &_default_to_quality_) {
    to_quality_ = new ::std::string;
  }
  return to_quality_;
}

// -------------------------------------------------------------------

// AlignmentHeader

// optional uint32 smallest_split_query_index = 9;
inline bool AlignmentHeader::has_smallest_split_query_index() const {
  return _has_bit(0);
}
inline void AlignmentHeader::clear_smallest_split_query_index() {
  smallest_split_query_index_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 AlignmentHeader::smallest_split_query_index() const {
  return smallest_split_query_index_;
}
inline void AlignmentHeader::set_smallest_split_query_index(::google::protobuf::uint32 value) {
  _set_bit(0);
  smallest_split_query_index_ = value;
}

// optional uint32 largest_split_query_index = 11;
inline bool AlignmentHeader::has_largest_split_query_index() const {
  return _has_bit(1);
}
inline void AlignmentHeader::clear_largest_split_query_index() {
  largest_split_query_index_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 AlignmentHeader::largest_split_query_index() const {
  return largest_split_query_index_;
}
inline void AlignmentHeader::set_largest_split_query_index(::google::protobuf::uint32 value) {
  _set_bit(1);
  largest_split_query_index_ = value;
}

// optional .goby.IdentifierMapping query_name_mapping = 1;
inline bool AlignmentHeader::has_query_name_mapping() const {
  return _has_bit(2);
}
inline void AlignmentHeader::clear_query_name_mapping() {
  if (query_name_mapping_ != NULL) query_name_mapping_->::goby::IdentifierMapping::Clear();
  _clear_bit(2);
}
inline const ::goby::IdentifierMapping& AlignmentHeader::query_name_mapping() const {
  return query_name_mapping_ != NULL ? *query_name_mapping_ : *default_instance_->query_name_mapping_;
}
inline ::goby::IdentifierMapping* AlignmentHeader::mutable_query_name_mapping() {
  _set_bit(2);
  if (query_name_mapping_ == NULL) query_name_mapping_ = new ::goby::IdentifierMapping;
  return query_name_mapping_;
}

// optional .goby.IdentifierMapping target_name_mapping = 2;
inline bool AlignmentHeader::has_target_name_mapping() const {
  return _has_bit(3);
}
inline void AlignmentHeader::clear_target_name_mapping() {
  if (target_name_mapping_ != NULL) target_name_mapping_->::goby::IdentifierMapping::Clear();
  _clear_bit(3);
}
inline const ::goby::IdentifierMapping& AlignmentHeader::target_name_mapping() const {
  return target_name_mapping_ != NULL ? *target_name_mapping_ : *default_instance_->target_name_mapping_;
}
inline ::goby::IdentifierMapping* AlignmentHeader::mutable_target_name_mapping() {
  _set_bit(3);
  if (target_name_mapping_ == NULL) target_name_mapping_ = new ::goby::IdentifierMapping;
  return target_name_mapping_;
}

// optional uint32 number_of_queries = 5;
inline bool AlignmentHeader::has_number_of_queries() const {
  return _has_bit(4);
}
inline void AlignmentHeader::clear_number_of_queries() {
  number_of_queries_ = 0u;
  _clear_bit(4);
}
inline ::google::protobuf::uint32 AlignmentHeader::number_of_queries() const {
  return number_of_queries_;
}
inline void AlignmentHeader::set_number_of_queries(::google::protobuf::uint32 value) {
  _set_bit(4);
  number_of_queries_ = value;
}

// optional uint32 number_of_targets = 6;
inline bool AlignmentHeader::has_number_of_targets() const {
  return _has_bit(5);
}
inline void AlignmentHeader::clear_number_of_targets() {
  number_of_targets_ = 0u;
  _clear_bit(5);
}
inline ::google::protobuf::uint32 AlignmentHeader::number_of_targets() const {
  return number_of_targets_;
}
inline void AlignmentHeader::set_number_of_targets(::google::protobuf::uint32 value) {
  _set_bit(5);
  number_of_targets_ = value;
}

// optional uint32 number_of_aligned_reads = 7;
inline bool AlignmentHeader::has_number_of_aligned_reads() const {
  return _has_bit(6);
}
inline void AlignmentHeader::clear_number_of_aligned_reads() {
  number_of_aligned_reads_ = 0u;
  _clear_bit(6);
}
inline ::google::protobuf::uint32 AlignmentHeader::number_of_aligned_reads() const {
  return number_of_aligned_reads_;
}
inline void AlignmentHeader::set_number_of_aligned_reads(::google::protobuf::uint32 value) {
  _set_bit(6);
  number_of_aligned_reads_ = value;
}

// repeated uint32 query_length = 3 [deprecated = true];
inline int AlignmentHeader::query_length_size() const {
  return query_length_.size();
}
inline void AlignmentHeader::clear_query_length() {
  query_length_.Clear();
}
inline ::google::protobuf::uint32 AlignmentHeader::query_length(int index) const {
  return query_length_.Get(index);
}
inline void AlignmentHeader::set_query_length(int index, ::google::protobuf::uint32 value) {
  query_length_.Set(index, value);
}
inline void AlignmentHeader::add_query_length(::google::protobuf::uint32 value) {
  query_length_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
AlignmentHeader::query_length() const {
  return query_length_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
AlignmentHeader::mutable_query_length() {
  return &query_length_;
}

// optional uint32 constant_query_length = 10;
inline bool AlignmentHeader::has_constant_query_length() const {
  return _has_bit(8);
}
inline void AlignmentHeader::clear_constant_query_length() {
  constant_query_length_ = 0u;
  _clear_bit(8);
}
inline ::google::protobuf::uint32 AlignmentHeader::constant_query_length() const {
  return constant_query_length_;
}
inline void AlignmentHeader::set_constant_query_length(::google::protobuf::uint32 value) {
  _set_bit(8);
  constant_query_length_ = value;
}

// repeated uint32 target_length = 8;
inline int AlignmentHeader::target_length_size() const {
  return target_length_.size();
}
inline void AlignmentHeader::clear_target_length() {
  target_length_.Clear();
}
inline ::google::protobuf::uint32 AlignmentHeader::target_length(int index) const {
  return target_length_.Get(index);
}
inline void AlignmentHeader::set_target_length(int index, ::google::protobuf::uint32 value) {
  target_length_.Set(index, value);
}
inline void AlignmentHeader::add_target_length(::google::protobuf::uint32 value) {
  target_length_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
AlignmentHeader::target_length() const {
  return target_length_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
AlignmentHeader::mutable_target_length() {
  return &target_length_;
}

// optional bool sorted = 13;
inline bool AlignmentHeader::has_sorted() const {
  return _has_bit(10);
}
inline void AlignmentHeader::clear_sorted() {
  sorted_ = false;
  _clear_bit(10);
}
inline bool AlignmentHeader::sorted() const {
  return sorted_;
}
inline void AlignmentHeader::set_sorted(bool value) {
  _set_bit(10);
  sorted_ = value;
}

// optional bool indexed = 14;
inline bool AlignmentHeader::has_indexed() const {
  return _has_bit(11);
}
inline void AlignmentHeader::clear_indexed() {
  indexed_ = false;
  _clear_bit(11);
}
inline bool AlignmentHeader::indexed() const {
  return indexed_;
}
inline void AlignmentHeader::set_indexed(bool value) {
  _set_bit(11);
  indexed_ = value;
}

// optional bool query_lengths_stored_in_entries = 15;
inline bool AlignmentHeader::has_query_lengths_stored_in_entries() const {
  return _has_bit(12);
}
inline void AlignmentHeader::clear_query_lengths_stored_in_entries() {
  query_lengths_stored_in_entries_ = false;
  _clear_bit(12);
}
inline bool AlignmentHeader::query_lengths_stored_in_entries() const {
  return query_lengths_stored_in_entries_;
}
inline void AlignmentHeader::set_query_lengths_stored_in_entries(bool value) {
  _set_bit(12);
  query_lengths_stored_in_entries_ = value;
}

// -------------------------------------------------------------------

// IdentifierMapping

// repeated .goby.IdentifierInfo mappings = 1;
inline int IdentifierMapping::mappings_size() const {
  return mappings_.size();
}
inline void IdentifierMapping::clear_mappings() {
  mappings_.Clear();
}
inline const ::goby::IdentifierInfo& IdentifierMapping::mappings(int index) const {
  return mappings_.Get(index);
}
inline ::goby::IdentifierInfo* IdentifierMapping::mutable_mappings(int index) {
  return mappings_.Mutable(index);
}
inline ::goby::IdentifierInfo* IdentifierMapping::add_mappings() {
  return mappings_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::goby::IdentifierInfo >&
IdentifierMapping::mappings() const {
  return mappings_;
}
inline ::google::protobuf::RepeatedPtrField< ::goby::IdentifierInfo >*
IdentifierMapping::mutable_mappings() {
  return &mappings_;
}

// -------------------------------------------------------------------

// IdentifierInfo

// required string name = 1;
inline bool IdentifierInfo::has_name() const {
  return _has_bit(0);
}
inline void IdentifierInfo::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& IdentifierInfo::name() const {
  return *name_;
}
inline void IdentifierInfo::set_name(const ::std::string& value) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void IdentifierInfo::set_name(const char* value) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void IdentifierInfo::set_name(const char* value, size_t size) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* IdentifierInfo::mutable_name() {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// required uint32 index = 2;
inline bool IdentifierInfo::has_index() const {
  return _has_bit(1);
}
inline void IdentifierInfo::clear_index() {
  index_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 IdentifierInfo::index() const {
  return index_;
}
inline void IdentifierInfo::set_index(::google::protobuf::uint32 value) {
  _set_bit(1);
  index_ = value;
}

// -------------------------------------------------------------------

// AlignmentTooManyHits

// required uint32 aligner_threshold = 2;
inline bool AlignmentTooManyHits::has_aligner_threshold() const {
  return _has_bit(0);
}
inline void AlignmentTooManyHits::clear_aligner_threshold() {
  aligner_threshold_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 AlignmentTooManyHits::aligner_threshold() const {
  return aligner_threshold_;
}
inline void AlignmentTooManyHits::set_aligner_threshold(::google::protobuf::uint32 value) {
  _set_bit(0);
  aligner_threshold_ = value;
}

// repeated .goby.AmbiguousLocation hits = 1;
inline int AlignmentTooManyHits::hits_size() const {
  return hits_.size();
}
inline void AlignmentTooManyHits::clear_hits() {
  hits_.Clear();
}
inline const ::goby::AmbiguousLocation& AlignmentTooManyHits::hits(int index) const {
  return hits_.Get(index);
}
inline ::goby::AmbiguousLocation* AlignmentTooManyHits::mutable_hits(int index) {
  return hits_.Mutable(index);
}
inline ::goby::AmbiguousLocation* AlignmentTooManyHits::add_hits() {
  return hits_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::goby::AmbiguousLocation >&
AlignmentTooManyHits::hits() const {
  return hits_;
}
inline ::google::protobuf::RepeatedPtrField< ::goby::AmbiguousLocation >*
AlignmentTooManyHits::mutable_hits() {
  return &hits_;
}

// -------------------------------------------------------------------

// AmbiguousLocation

// required uint32 query_index = 1;
inline bool AmbiguousLocation::has_query_index() const {
  return _has_bit(0);
}
inline void AmbiguousLocation::clear_query_index() {
  query_index_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 AmbiguousLocation::query_index() const {
  return query_index_;
}
inline void AmbiguousLocation::set_query_index(::google::protobuf::uint32 value) {
  _set_bit(0);
  query_index_ = value;
}

// required uint32 at_least_number_of_hits = 2;
inline bool AmbiguousLocation::has_at_least_number_of_hits() const {
  return _has_bit(1);
}
inline void AmbiguousLocation::clear_at_least_number_of_hits() {
  at_least_number_of_hits_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 AmbiguousLocation::at_least_number_of_hits() const {
  return at_least_number_of_hits_;
}
inline void AmbiguousLocation::set_at_least_number_of_hits(::google::protobuf::uint32 value) {
  _set_bit(1);
  at_least_number_of_hits_ = value;
}

// optional uint32 length_of_match = 3;
inline bool AmbiguousLocation::has_length_of_match() const {
  return _has_bit(2);
}
inline void AmbiguousLocation::clear_length_of_match() {
  length_of_match_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 AmbiguousLocation::length_of_match() const {
  return length_of_match_;
}
inline void AmbiguousLocation::set_length_of_match(::google::protobuf::uint32 value) {
  _set_bit(2);
  length_of_match_ = value;
}

// -------------------------------------------------------------------

// AlignmentIndex

// repeated uint32 target_position_offsets = 1 [packed = true];
inline int AlignmentIndex::target_position_offsets_size() const {
  return target_position_offsets_.size();
}
inline void AlignmentIndex::clear_target_position_offsets() {
  target_position_offsets_.Clear();
}
inline ::google::protobuf::uint32 AlignmentIndex::target_position_offsets(int index) const {
  return target_position_offsets_.Get(index);
}
inline void AlignmentIndex::set_target_position_offsets(int index, ::google::protobuf::uint32 value) {
  target_position_offsets_.Set(index, value);
}
inline void AlignmentIndex::add_target_position_offsets(::google::protobuf::uint32 value) {
  target_position_offsets_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
AlignmentIndex::target_position_offsets() const {
  return target_position_offsets_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
AlignmentIndex::mutable_target_position_offsets() {
  return &target_position_offsets_;
}

// repeated uint64 offsets = 2 [packed = true];
inline int AlignmentIndex::offsets_size() const {
  return offsets_.size();
}
inline void AlignmentIndex::clear_offsets() {
  offsets_.Clear();
}
inline ::google::protobuf::uint64 AlignmentIndex::offsets(int index) const {
  return offsets_.Get(index);
}
inline void AlignmentIndex::set_offsets(int index, ::google::protobuf::uint64 value) {
  offsets_.Set(index, value);
}
inline void AlignmentIndex::add_offsets(::google::protobuf::uint64 value) {
  offsets_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
AlignmentIndex::offsets() const {
  return offsets_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
AlignmentIndex::mutable_offsets() {
  return &offsets_;
}

// repeated uint64 absolute_positions = 3 [packed = true];
inline int AlignmentIndex::absolute_positions_size() const {
  return absolute_positions_.size();
}
inline void AlignmentIndex::clear_absolute_positions() {
  absolute_positions_.Clear();
}
inline ::google::protobuf::uint64 AlignmentIndex::absolute_positions(int index) const {
  return absolute_positions_.Get(index);
}
inline void AlignmentIndex::set_absolute_positions(int index, ::google::protobuf::uint64 value) {
  absolute_positions_.Set(index, value);
}
inline void AlignmentIndex::add_absolute_positions(::google::protobuf::uint64 value) {
  absolute_positions_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
AlignmentIndex::absolute_positions() const {
  return absolute_positions_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
AlignmentIndex::mutable_absolute_positions() {
  return &absolute_positions_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace goby

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Alignments_2eproto__INCLUDED
