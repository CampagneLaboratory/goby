// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Alignments.proto

#ifndef PROTOBUF_Alignments_2eproto__INCLUDED
#define PROTOBUF_Alignments_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace goby {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Alignments_2eproto();
void protobuf_AssignDesc_Alignments_2eproto();
void protobuf_ShutdownFile_Alignments_2eproto();

class AlignmentCollection;
class AlignmentEntry;
class RelatedAlignmentEntry;
class SequenceVariation;
class AlignmentHeader;
class IdentifierMapping;
class IdentifierInfo;
class ReadOriginInfo;
class AlignmentTooManyHits;
class AmbiguousLocation;
class AlignmentIndex;

// ===================================================================

class AlignmentCollection : public ::google::protobuf::Message {
 public:
  AlignmentCollection();
  virtual ~AlignmentCollection();
  
  AlignmentCollection(const AlignmentCollection& from);
  
  inline AlignmentCollection& operator=(const AlignmentCollection& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AlignmentCollection& default_instance();
  
  void Swap(AlignmentCollection* other);
  
  // implements Message ----------------------------------------------
  
  AlignmentCollection* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AlignmentCollection& from);
  void MergeFrom(const AlignmentCollection& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .goby.AlignmentEntry alignment_entries = 1;
  inline int alignment_entries_size() const;
  inline void clear_alignment_entries();
  static const int kAlignmentEntriesFieldNumber = 1;
  inline const ::goby::AlignmentEntry& alignment_entries(int index) const;
  inline ::goby::AlignmentEntry* mutable_alignment_entries(int index);
  inline ::goby::AlignmentEntry* add_alignment_entries();
  inline const ::google::protobuf::RepeatedPtrField< ::goby::AlignmentEntry >&
      alignment_entries() const;
  inline ::google::protobuf::RepeatedPtrField< ::goby::AlignmentEntry >*
      mutable_alignment_entries();
  
  // @@protoc_insertion_point(class_scope:goby.AlignmentCollection)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::goby::AlignmentEntry > alignment_entries_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_Alignments_2eproto();
  friend void protobuf_AssignDesc_Alignments_2eproto();
  friend void protobuf_ShutdownFile_Alignments_2eproto();
  
  void InitAsDefaultInstance();
  static AlignmentCollection* default_instance_;
};
// -------------------------------------------------------------------

class AlignmentEntry : public ::google::protobuf::Message {
 public:
  AlignmentEntry();
  virtual ~AlignmentEntry();
  
  AlignmentEntry(const AlignmentEntry& from);
  
  inline AlignmentEntry& operator=(const AlignmentEntry& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AlignmentEntry& default_instance();
  
  void Swap(AlignmentEntry* other);
  
  // implements Message ----------------------------------------------
  
  AlignmentEntry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AlignmentEntry& from);
  void MergeFrom(const AlignmentEntry& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 multiplicity = 7;
  inline bool has_multiplicity() const;
  inline void clear_multiplicity();
  static const int kMultiplicityFieldNumber = 7;
  inline ::google::protobuf::uint32 multiplicity() const;
  inline void set_multiplicity(::google::protobuf::uint32 value);
  
  // optional uint32 query_index = 1;
  inline bool has_query_index() const;
  inline void clear_query_index();
  static const int kQueryIndexFieldNumber = 1;
  inline ::google::protobuf::uint32 query_index() const;
  inline void set_query_index(::google::protobuf::uint32 value);
  
  // optional uint32 target_index = 2;
  inline bool has_target_index() const;
  inline void clear_target_index();
  static const int kTargetIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 target_index() const;
  inline void set_target_index(::google::protobuf::uint32 value);
  
  // optional uint32 position = 3;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 3;
  inline ::google::protobuf::uint32 position() const;
  inline void set_position(::google::protobuf::uint32 value);
  
  // optional bool matching_reverse_strand = 6;
  inline bool has_matching_reverse_strand() const;
  inline void clear_matching_reverse_strand();
  static const int kMatchingReverseStrandFieldNumber = 6;
  inline bool matching_reverse_strand() const;
  inline void set_matching_reverse_strand(bool value);
  
  // optional uint32 query_position = 5;
  inline bool has_query_position() const;
  inline void clear_query_position();
  static const int kQueryPositionFieldNumber = 5;
  inline ::google::protobuf::uint32 query_position() const;
  inline void set_query_position(::google::protobuf::uint32 value);
  
  // optional float score = 4;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 4;
  inline float score() const;
  inline void set_score(float value);
  
  // optional uint32 number_of_mismatches = 8;
  inline bool has_number_of_mismatches() const;
  inline void clear_number_of_mismatches();
  static const int kNumberOfMismatchesFieldNumber = 8;
  inline ::google::protobuf::uint32 number_of_mismatches() const;
  inline void set_number_of_mismatches(::google::protobuf::uint32 value);
  
  // optional uint32 number_of_indels = 9;
  inline bool has_number_of_indels() const;
  inline void clear_number_of_indels();
  static const int kNumberOfIndelsFieldNumber = 9;
  inline ::google::protobuf::uint32 number_of_indels() const;
  inline void set_number_of_indels(::google::protobuf::uint32 value);
  
  // optional uint32 query_aligned_length = 11;
  inline bool has_query_aligned_length() const;
  inline void clear_query_aligned_length();
  static const int kQueryAlignedLengthFieldNumber = 11;
  inline ::google::protobuf::uint32 query_aligned_length() const;
  inline void set_query_aligned_length(::google::protobuf::uint32 value);
  
  // optional uint32 target_aligned_length = 12;
  inline bool has_target_aligned_length() const;
  inline void clear_target_aligned_length();
  static const int kTargetAlignedLengthFieldNumber = 12;
  inline ::google::protobuf::uint32 target_aligned_length() const;
  inline void set_target_aligned_length(::google::protobuf::uint32 value);
  
  // repeated .goby.SequenceVariation sequence_variations = 13;
  inline int sequence_variations_size() const;
  inline void clear_sequence_variations();
  static const int kSequenceVariationsFieldNumber = 13;
  inline const ::goby::SequenceVariation& sequence_variations(int index) const;
  inline ::goby::SequenceVariation* mutable_sequence_variations(int index);
  inline ::goby::SequenceVariation* add_sequence_variations();
  inline const ::google::protobuf::RepeatedPtrField< ::goby::SequenceVariation >&
      sequence_variations() const;
  inline ::google::protobuf::RepeatedPtrField< ::goby::SequenceVariation >*
      mutable_sequence_variations();
  
  // optional uint32 query_length = 10;
  inline bool has_query_length() const;
  inline void clear_query_length();
  static const int kQueryLengthFieldNumber = 10;
  inline ::google::protobuf::uint32 query_length() const;
  inline void set_query_length(::google::protobuf::uint32 value);
  
  // optional int32 mapping_quality = 14;
  inline bool has_mapping_quality() const;
  inline void clear_mapping_quality();
  static const int kMappingQualityFieldNumber = 14;
  inline ::google::protobuf::int32 mapping_quality() const;
  inline void set_mapping_quality(::google::protobuf::int32 value);
  
  // optional uint32 pair_flags = 15;
  inline bool has_pair_flags() const;
  inline void clear_pair_flags();
  static const int kPairFlagsFieldNumber = 15;
  inline ::google::protobuf::uint32 pair_flags() const;
  inline void set_pair_flags(::google::protobuf::uint32 value);
  
  // optional .goby.RelatedAlignmentEntry pair_alignment_link = 16;
  inline bool has_pair_alignment_link() const;
  inline void clear_pair_alignment_link();
  static const int kPairAlignmentLinkFieldNumber = 16;
  inline const ::goby::RelatedAlignmentEntry& pair_alignment_link() const;
  inline ::goby::RelatedAlignmentEntry* mutable_pair_alignment_link();
  inline ::goby::RelatedAlignmentEntry* release_pair_alignment_link();
  
  // optional uint32 fragment_index = 17;
  inline bool has_fragment_index() const;
  inline void clear_fragment_index();
  static const int kFragmentIndexFieldNumber = 17;
  inline ::google::protobuf::uint32 fragment_index() const;
  inline void set_fragment_index(::google::protobuf::uint32 value);
  
  // optional .goby.RelatedAlignmentEntry spliced_forward_alignment_link = 18;
  inline bool has_spliced_forward_alignment_link() const;
  inline void clear_spliced_forward_alignment_link();
  static const int kSplicedForwardAlignmentLinkFieldNumber = 18;
  inline const ::goby::RelatedAlignmentEntry& spliced_forward_alignment_link() const;
  inline ::goby::RelatedAlignmentEntry* mutable_spliced_forward_alignment_link();
  inline ::goby::RelatedAlignmentEntry* release_spliced_forward_alignment_link();
  
  // optional .goby.RelatedAlignmentEntry spliced_backward_alignment_link = 22;
  inline bool has_spliced_backward_alignment_link() const;
  inline void clear_spliced_backward_alignment_link();
  static const int kSplicedBackwardAlignmentLinkFieldNumber = 22;
  inline const ::goby::RelatedAlignmentEntry& spliced_backward_alignment_link() const;
  inline ::goby::RelatedAlignmentEntry* mutable_spliced_backward_alignment_link();
  inline ::goby::RelatedAlignmentEntry* release_spliced_backward_alignment_link();
  
  // optional uint32 spliced_flags = 19;
  inline bool has_spliced_flags() const;
  inline void clear_spliced_flags();
  static const int kSplicedFlagsFieldNumber = 19;
  inline ::google::protobuf::uint32 spliced_flags() const;
  inline void set_spliced_flags(::google::protobuf::uint32 value);
  
  // optional uint32 insert_size = 20;
  inline bool has_insert_size() const;
  inline void clear_insert_size();
  static const int kInsertSizeFieldNumber = 20;
  inline ::google::protobuf::uint32 insert_size() const;
  inline void set_insert_size(::google::protobuf::uint32 value);
  
  // optional uint32 sample_index = 21;
  inline bool has_sample_index() const;
  inline void clear_sample_index();
  static const int kSampleIndexFieldNumber = 21;
  inline ::google::protobuf::uint32 sample_index() const;
  inline void set_sample_index(::google::protobuf::uint32 value);
  
  // optional uint32 query_index_occurrences = 25;
  inline bool has_query_index_occurrences() const;
  inline void clear_query_index_occurrences();
  static const int kQueryIndexOccurrencesFieldNumber = 25;
  inline ::google::protobuf::uint32 query_index_occurrences() const;
  inline void set_query_index_occurrences(::google::protobuf::uint32 value);
  
  // optional uint32 ambiguity = 27;
  inline bool has_ambiguity() const;
  inline void clear_ambiguity();
  static const int kAmbiguityFieldNumber = 27;
  inline ::google::protobuf::uint32 ambiguity() const;
  inline void set_ambiguity(::google::protobuf::uint32 value);
  
  // repeated string bam_attributes = 50;
  inline int bam_attributes_size() const;
  inline void clear_bam_attributes();
  static const int kBamAttributesFieldNumber = 50;
  inline const ::std::string& bam_attributes(int index) const;
  inline ::std::string* mutable_bam_attributes(int index);
  inline void set_bam_attributes(int index, const ::std::string& value);
  inline void set_bam_attributes(int index, const char* value);
  inline void set_bam_attributes(int index, const char* value, size_t size);
  inline ::std::string* add_bam_attributes();
  inline void add_bam_attributes(const ::std::string& value);
  inline void add_bam_attributes(const char* value);
  inline void add_bam_attributes(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& bam_attributes() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_bam_attributes();
  
  // optional bytes read_quality_scores = 55;
  inline bool has_read_quality_scores() const;
  inline void clear_read_quality_scores();
  static const int kReadQualityScoresFieldNumber = 55;
  inline const ::std::string& read_quality_scores() const;
  inline void set_read_quality_scores(const ::std::string& value);
  inline void set_read_quality_scores(const char* value);
  inline void set_read_quality_scores(const void* value, size_t size);
  inline ::std::string* mutable_read_quality_scores();
  inline ::std::string* release_read_quality_scores();
  
  // optional uint32 read_origin_index = 26;
  inline bool has_read_origin_index() const;
  inline void clear_read_origin_index();
  static const int kReadOriginIndexFieldNumber = 26;
  inline ::google::protobuf::uint32 read_origin_index() const;
  inline void set_read_origin_index(::google::protobuf::uint32 value);
  
  // optional string softClippedBasesLeft = 30;
  inline bool has_softclippedbasesleft() const;
  inline void clear_softclippedbasesleft();
  static const int kSoftClippedBasesLeftFieldNumber = 30;
  inline const ::std::string& softclippedbasesleft() const;
  inline void set_softclippedbasesleft(const ::std::string& value);
  inline void set_softclippedbasesleft(const char* value);
  inline void set_softclippedbasesleft(const char* value, size_t size);
  inline ::std::string* mutable_softclippedbasesleft();
  inline ::std::string* release_softclippedbasesleft();
  
  // optional string softClippedBasesRight = 31;
  inline bool has_softclippedbasesright() const;
  inline void clear_softclippedbasesright();
  static const int kSoftClippedBasesRightFieldNumber = 31;
  inline const ::std::string& softclippedbasesright() const;
  inline void set_softclippedbasesright(const ::std::string& value);
  inline void set_softclippedbasesright(const char* value);
  inline void set_softclippedbasesright(const char* value, size_t size);
  inline ::std::string* mutable_softclippedbasesright();
  inline ::std::string* release_softclippedbasesright();
  
  // @@protoc_insertion_point(class_scope:goby.AlignmentEntry)
 private:
  inline void set_has_multiplicity();
  inline void clear_has_multiplicity();
  inline void set_has_query_index();
  inline void clear_has_query_index();
  inline void set_has_target_index();
  inline void clear_has_target_index();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_matching_reverse_strand();
  inline void clear_has_matching_reverse_strand();
  inline void set_has_query_position();
  inline void clear_has_query_position();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_number_of_mismatches();
  inline void clear_has_number_of_mismatches();
  inline void set_has_number_of_indels();
  inline void clear_has_number_of_indels();
  inline void set_has_query_aligned_length();
  inline void clear_has_query_aligned_length();
  inline void set_has_target_aligned_length();
  inline void clear_has_target_aligned_length();
  inline void set_has_query_length();
  inline void clear_has_query_length();
  inline void set_has_mapping_quality();
  inline void clear_has_mapping_quality();
  inline void set_has_pair_flags();
  inline void clear_has_pair_flags();
  inline void set_has_pair_alignment_link();
  inline void clear_has_pair_alignment_link();
  inline void set_has_fragment_index();
  inline void clear_has_fragment_index();
  inline void set_has_spliced_forward_alignment_link();
  inline void clear_has_spliced_forward_alignment_link();
  inline void set_has_spliced_backward_alignment_link();
  inline void clear_has_spliced_backward_alignment_link();
  inline void set_has_spliced_flags();
  inline void clear_has_spliced_flags();
  inline void set_has_insert_size();
  inline void clear_has_insert_size();
  inline void set_has_sample_index();
  inline void clear_has_sample_index();
  inline void set_has_query_index_occurrences();
  inline void clear_has_query_index_occurrences();
  inline void set_has_ambiguity();
  inline void clear_has_ambiguity();
  inline void set_has_read_quality_scores();
  inline void clear_has_read_quality_scores();
  inline void set_has_read_origin_index();
  inline void clear_has_read_origin_index();
  inline void set_has_softclippedbasesleft();
  inline void clear_has_softclippedbasesleft();
  inline void set_has_softclippedbasesright();
  inline void clear_has_softclippedbasesright();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 multiplicity_;
  ::google::protobuf::uint32 query_index_;
  ::google::protobuf::uint32 target_index_;
  ::google::protobuf::uint32 position_;
  bool matching_reverse_strand_;
  ::google::protobuf::uint32 query_position_;
  float score_;
  ::google::protobuf::uint32 number_of_mismatches_;
  ::google::protobuf::uint32 number_of_indels_;
  ::google::protobuf::uint32 query_aligned_length_;
  ::google::protobuf::uint32 target_aligned_length_;
  ::google::protobuf::uint32 query_length_;
  ::google::protobuf::RepeatedPtrField< ::goby::SequenceVariation > sequence_variations_;
  ::google::protobuf::int32 mapping_quality_;
  ::google::protobuf::uint32 pair_flags_;
  ::goby::RelatedAlignmentEntry* pair_alignment_link_;
  ::goby::RelatedAlignmentEntry* spliced_forward_alignment_link_;
  ::google::protobuf::uint32 fragment_index_;
  ::google::protobuf::uint32 spliced_flags_;
  ::goby::RelatedAlignmentEntry* spliced_backward_alignment_link_;
  ::google::protobuf::uint32 insert_size_;
  ::google::protobuf::uint32 sample_index_;
  ::google::protobuf::uint32 query_index_occurrences_;
  ::google::protobuf::uint32 ambiguity_;
  ::google::protobuf::RepeatedPtrField< ::std::string> bam_attributes_;
  ::std::string* read_quality_scores_;
  ::std::string* softclippedbasesleft_;
  ::std::string* softclippedbasesright_;
  ::google::protobuf::uint32 read_origin_index_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(29 + 31) / 32];
  
  friend void  protobuf_AddDesc_Alignments_2eproto();
  friend void protobuf_AssignDesc_Alignments_2eproto();
  friend void protobuf_ShutdownFile_Alignments_2eproto();
  
  void InitAsDefaultInstance();
  static AlignmentEntry* default_instance_;
};
// -------------------------------------------------------------------

class RelatedAlignmentEntry : public ::google::protobuf::Message {
 public:
  RelatedAlignmentEntry();
  virtual ~RelatedAlignmentEntry();
  
  RelatedAlignmentEntry(const RelatedAlignmentEntry& from);
  
  inline RelatedAlignmentEntry& operator=(const RelatedAlignmentEntry& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RelatedAlignmentEntry& default_instance();
  
  void Swap(RelatedAlignmentEntry* other);
  
  // implements Message ----------------------------------------------
  
  RelatedAlignmentEntry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RelatedAlignmentEntry& from);
  void MergeFrom(const RelatedAlignmentEntry& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 target_index = 1;
  inline bool has_target_index() const;
  inline void clear_target_index();
  static const int kTargetIndexFieldNumber = 1;
  inline ::google::protobuf::uint32 target_index() const;
  inline void set_target_index(::google::protobuf::uint32 value);
  
  // optional uint32 position = 2;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 2;
  inline ::google::protobuf::uint32 position() const;
  inline void set_position(::google::protobuf::uint32 value);
  
  // optional uint32 fragment_index = 3;
  inline bool has_fragment_index() const;
  inline void clear_fragment_index();
  static const int kFragmentIndexFieldNumber = 3;
  inline ::google::protobuf::uint32 fragment_index() const;
  inline void set_fragment_index(::google::protobuf::uint32 value);
  
  // optional uint32 optimized_index = 50;
  inline bool has_optimized_index() const;
  inline void clear_optimized_index();
  static const int kOptimizedIndexFieldNumber = 50;
  inline ::google::protobuf::uint32 optimized_index() const;
  inline void set_optimized_index(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:goby.RelatedAlignmentEntry)
 private:
  inline void set_has_target_index();
  inline void clear_has_target_index();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_fragment_index();
  inline void clear_has_fragment_index();
  inline void set_has_optimized_index();
  inline void clear_has_optimized_index();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 target_index_;
  ::google::protobuf::uint32 position_;
  ::google::protobuf::uint32 fragment_index_;
  ::google::protobuf::uint32 optimized_index_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_Alignments_2eproto();
  friend void protobuf_AssignDesc_Alignments_2eproto();
  friend void protobuf_ShutdownFile_Alignments_2eproto();
  
  void InitAsDefaultInstance();
  static RelatedAlignmentEntry* default_instance_;
};
// -------------------------------------------------------------------

class SequenceVariation : public ::google::protobuf::Message {
 public:
  SequenceVariation();
  virtual ~SequenceVariation();
  
  SequenceVariation(const SequenceVariation& from);
  
  inline SequenceVariation& operator=(const SequenceVariation& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SequenceVariation& default_instance();
  
  void Swap(SequenceVariation* other);
  
  // implements Message ----------------------------------------------
  
  SequenceVariation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SequenceVariation& from);
  void MergeFrom(const SequenceVariation& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string from = 2;
  inline bool has_from() const;
  inline void clear_from();
  static const int kFromFieldNumber = 2;
  inline const ::std::string& from() const;
  inline void set_from(const ::std::string& value);
  inline void set_from(const char* value);
  inline void set_from(const char* value, size_t size);
  inline ::std::string* mutable_from();
  inline ::std::string* release_from();
  
  // optional string to = 1;
  inline bool has_to() const;
  inline void clear_to();
  static const int kToFieldNumber = 1;
  inline const ::std::string& to() const;
  inline void set_to(const ::std::string& value);
  inline void set_to(const char* value);
  inline void set_to(const char* value, size_t size);
  inline ::std::string* mutable_to();
  inline ::std::string* release_to();
  
  // optional uint32 position = 3;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 3;
  inline ::google::protobuf::uint32 position() const;
  inline void set_position(::google::protobuf::uint32 value);
  
  // optional uint32 read_index = 5;
  inline bool has_read_index() const;
  inline void clear_read_index();
  static const int kReadIndexFieldNumber = 5;
  inline ::google::protobuf::uint32 read_index() const;
  inline void set_read_index(::google::protobuf::uint32 value);
  
  // optional bytes to_quality = 4;
  inline bool has_to_quality() const;
  inline void clear_to_quality();
  static const int kToQualityFieldNumber = 4;
  inline const ::std::string& to_quality() const;
  inline void set_to_quality(const ::std::string& value);
  inline void set_to_quality(const char* value);
  inline void set_to_quality(const void* value, size_t size);
  inline ::std::string* mutable_to_quality();
  inline ::std::string* release_to_quality();
  
  // @@protoc_insertion_point(class_scope:goby.SequenceVariation)
 private:
  inline void set_has_from();
  inline void clear_has_from();
  inline void set_has_to();
  inline void clear_has_to();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_read_index();
  inline void clear_has_read_index();
  inline void set_has_to_quality();
  inline void clear_has_to_quality();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* from_;
  ::std::string* to_;
  ::google::protobuf::uint32 position_;
  ::google::protobuf::uint32 read_index_;
  ::std::string* to_quality_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_Alignments_2eproto();
  friend void protobuf_AssignDesc_Alignments_2eproto();
  friend void protobuf_ShutdownFile_Alignments_2eproto();
  
  void InitAsDefaultInstance();
  static SequenceVariation* default_instance_;
};
// -------------------------------------------------------------------

class AlignmentHeader : public ::google::protobuf::Message {
 public:
  AlignmentHeader();
  virtual ~AlignmentHeader();
  
  AlignmentHeader(const AlignmentHeader& from);
  
  inline AlignmentHeader& operator=(const AlignmentHeader& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AlignmentHeader& default_instance();
  
  void Swap(AlignmentHeader* other);
  
  // implements Message ----------------------------------------------
  
  AlignmentHeader* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AlignmentHeader& from);
  void MergeFrom(const AlignmentHeader& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 smallest_split_query_index = 9;
  inline bool has_smallest_split_query_index() const;
  inline void clear_smallest_split_query_index();
  static const int kSmallestSplitQueryIndexFieldNumber = 9;
  inline ::google::protobuf::uint32 smallest_split_query_index() const;
  inline void set_smallest_split_query_index(::google::protobuf::uint32 value);
  
  // optional uint32 largest_split_query_index = 11;
  inline bool has_largest_split_query_index() const;
  inline void clear_largest_split_query_index();
  static const int kLargestSplitQueryIndexFieldNumber = 11;
  inline ::google::protobuf::uint32 largest_split_query_index() const;
  inline void set_largest_split_query_index(::google::protobuf::uint32 value);
  
  // optional .goby.IdentifierMapping query_name_mapping = 1;
  inline bool has_query_name_mapping() const;
  inline void clear_query_name_mapping();
  static const int kQueryNameMappingFieldNumber = 1;
  inline const ::goby::IdentifierMapping& query_name_mapping() const;
  inline ::goby::IdentifierMapping* mutable_query_name_mapping();
  inline ::goby::IdentifierMapping* release_query_name_mapping();
  
  // optional .goby.IdentifierMapping target_name_mapping = 2;
  inline bool has_target_name_mapping() const;
  inline void clear_target_name_mapping();
  static const int kTargetNameMappingFieldNumber = 2;
  inline const ::goby::IdentifierMapping& target_name_mapping() const;
  inline ::goby::IdentifierMapping* mutable_target_name_mapping();
  inline ::goby::IdentifierMapping* release_target_name_mapping();
  
  // optional uint32 number_of_queries = 5;
  inline bool has_number_of_queries() const;
  inline void clear_number_of_queries();
  static const int kNumberOfQueriesFieldNumber = 5;
  inline ::google::protobuf::uint32 number_of_queries() const;
  inline void set_number_of_queries(::google::protobuf::uint32 value);
  
  // optional uint32 number_of_targets = 6;
  inline bool has_number_of_targets() const;
  inline void clear_number_of_targets();
  static const int kNumberOfTargetsFieldNumber = 6;
  inline ::google::protobuf::uint32 number_of_targets() const;
  inline void set_number_of_targets(::google::protobuf::uint32 value);
  
  // optional uint32 number_of_aligned_reads = 7;
  inline bool has_number_of_aligned_reads() const;
  inline void clear_number_of_aligned_reads();
  static const int kNumberOfAlignedReadsFieldNumber = 7;
  inline ::google::protobuf::uint32 number_of_aligned_reads() const;
  inline void set_number_of_aligned_reads(::google::protobuf::uint32 value);
  
  // repeated uint32 query_length = 3 [deprecated = true];
  inline int query_length_size() const PROTOBUF_DEPRECATED;
  inline void clear_query_length() PROTOBUF_DEPRECATED;
  static const int kQueryLengthFieldNumber = 3;
  inline ::google::protobuf::uint32 query_length(int index) const PROTOBUF_DEPRECATED;
  inline void set_query_length(int index, ::google::protobuf::uint32 value) PROTOBUF_DEPRECATED;
  inline void add_query_length(::google::protobuf::uint32 value) PROTOBUF_DEPRECATED;
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      query_length() const PROTOBUF_DEPRECATED;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_query_length() PROTOBUF_DEPRECATED;
  
  // optional uint32 constant_query_length = 10;
  inline bool has_constant_query_length() const;
  inline void clear_constant_query_length();
  static const int kConstantQueryLengthFieldNumber = 10;
  inline ::google::protobuf::uint32 constant_query_length() const;
  inline void set_constant_query_length(::google::protobuf::uint32 value);
  
  // repeated uint32 target_length = 8;
  inline int target_length_size() const;
  inline void clear_target_length();
  static const int kTargetLengthFieldNumber = 8;
  inline ::google::protobuf::uint32 target_length(int index) const;
  inline void set_target_length(int index, ::google::protobuf::uint32 value);
  inline void add_target_length(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      target_length() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_target_length();
  
  // optional bool sorted = 13;
  inline bool has_sorted() const;
  inline void clear_sorted();
  static const int kSortedFieldNumber = 13;
  inline bool sorted() const;
  inline void set_sorted(bool value);
  
  // optional bool indexed = 14;
  inline bool has_indexed() const;
  inline void clear_indexed();
  static const int kIndexedFieldNumber = 14;
  inline bool indexed() const;
  inline void set_indexed(bool value);
  
  // optional bool query_lengths_stored_in_entries = 15;
  inline bool has_query_lengths_stored_in_entries() const;
  inline void clear_query_lengths_stored_in_entries();
  static const int kQueryLengthsStoredInEntriesFieldNumber = 15;
  inline bool query_lengths_stored_in_entries() const;
  inline void set_query_lengths_stored_in_entries(bool value);
  
  // optional string aligner_name = 17;
  inline bool has_aligner_name() const;
  inline void clear_aligner_name();
  static const int kAlignerNameFieldNumber = 17;
  inline const ::std::string& aligner_name() const;
  inline void set_aligner_name(const ::std::string& value);
  inline void set_aligner_name(const char* value);
  inline void set_aligner_name(const char* value, size_t size);
  inline ::std::string* mutable_aligner_name();
  inline ::std::string* release_aligner_name();
  
  // optional string aligner_version = 18;
  inline bool has_aligner_version() const;
  inline void clear_aligner_version();
  static const int kAlignerVersionFieldNumber = 18;
  inline const ::std::string& aligner_version() const;
  inline void set_aligner_version(const ::std::string& value);
  inline void set_aligner_version(const char* value);
  inline void set_aligner_version(const char* value, size_t size);
  inline ::std::string* mutable_aligner_version();
  inline ::std::string* release_aligner_version();
  
  // optional string version = 25;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 25;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const char* value, size_t size);
  inline ::std::string* mutable_version();
  inline ::std::string* release_version();
  
  // repeated string sample_basename = 30;
  inline int sample_basename_size() const;
  inline void clear_sample_basename();
  static const int kSampleBasenameFieldNumber = 30;
  inline const ::std::string& sample_basename(int index) const;
  inline ::std::string* mutable_sample_basename(int index);
  inline void set_sample_basename(int index, const ::std::string& value);
  inline void set_sample_basename(int index, const char* value);
  inline void set_sample_basename(int index, const char* value, size_t size);
  inline ::std::string* add_sample_basename();
  inline void add_sample_basename(const ::std::string& value);
  inline void add_sample_basename(const char* value);
  inline void add_sample_basename(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& sample_basename() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_sample_basename();
  
  // optional bool query_indices_were_permuted = 26;
  inline bool has_query_indices_were_permuted() const;
  inline void clear_query_indices_were_permuted();
  static const int kQueryIndicesWerePermutedFieldNumber = 26;
  inline bool query_indices_were_permuted() const;
  inline void set_query_indices_were_permuted(bool value);
  
  // optional bool query_index_occurrences = 35;
  inline bool has_query_index_occurrences() const;
  inline void clear_query_index_occurrences();
  static const int kQueryIndexOccurrencesFieldNumber = 35;
  inline bool query_index_occurrences() const;
  inline void set_query_index_occurrences(bool value);
  
  // optional bool ambiguity_stored_in_entries = 36;
  inline bool has_ambiguity_stored_in_entries() const;
  inline void clear_ambiguity_stored_in_entries();
  static const int kAmbiguityStoredInEntriesFieldNumber = 36;
  inline bool ambiguity_stored_in_entries() const;
  inline void set_ambiguity_stored_in_entries(bool value);
  
  // optional bool all_read_quality_scores = 40;
  inline bool has_all_read_quality_scores() const;
  inline void clear_all_read_quality_scores();
  static const int kAllReadQualityScoresFieldNumber = 40;
  inline bool all_read_quality_scores() const;
  inline void set_all_read_quality_scores(bool value);
  
  // repeated .goby.ReadOriginInfo read_origin = 27;
  inline int read_origin_size() const;
  inline void clear_read_origin();
  static const int kReadOriginFieldNumber = 27;
  inline const ::goby::ReadOriginInfo& read_origin(int index) const;
  inline ::goby::ReadOriginInfo* mutable_read_origin(int index);
  inline ::goby::ReadOriginInfo* add_read_origin();
  inline const ::google::protobuf::RepeatedPtrField< ::goby::ReadOriginInfo >&
      read_origin() const;
  inline ::google::protobuf::RepeatedPtrField< ::goby::ReadOriginInfo >*
      mutable_read_origin();
  
  // @@protoc_insertion_point(class_scope:goby.AlignmentHeader)
 private:
  inline void set_has_smallest_split_query_index();
  inline void clear_has_smallest_split_query_index();
  inline void set_has_largest_split_query_index();
  inline void clear_has_largest_split_query_index();
  inline void set_has_query_name_mapping();
  inline void clear_has_query_name_mapping();
  inline void set_has_target_name_mapping();
  inline void clear_has_target_name_mapping();
  inline void set_has_number_of_queries();
  inline void clear_has_number_of_queries();
  inline void set_has_number_of_targets();
  inline void clear_has_number_of_targets();
  inline void set_has_number_of_aligned_reads();
  inline void clear_has_number_of_aligned_reads();
  inline void set_has_constant_query_length();
  inline void clear_has_constant_query_length();
  inline void set_has_sorted();
  inline void clear_has_sorted();
  inline void set_has_indexed();
  inline void clear_has_indexed();
  inline void set_has_query_lengths_stored_in_entries();
  inline void clear_has_query_lengths_stored_in_entries();
  inline void set_has_aligner_name();
  inline void clear_has_aligner_name();
  inline void set_has_aligner_version();
  inline void clear_has_aligner_version();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_query_indices_were_permuted();
  inline void clear_has_query_indices_were_permuted();
  inline void set_has_query_index_occurrences();
  inline void clear_has_query_index_occurrences();
  inline void set_has_ambiguity_stored_in_entries();
  inline void clear_has_ambiguity_stored_in_entries();
  inline void set_has_all_read_quality_scores();
  inline void clear_has_all_read_quality_scores();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 smallest_split_query_index_;
  ::google::protobuf::uint32 largest_split_query_index_;
  ::goby::IdentifierMapping* query_name_mapping_;
  ::goby::IdentifierMapping* target_name_mapping_;
  ::google::protobuf::uint32 number_of_queries_;
  ::google::protobuf::uint32 number_of_targets_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > query_length_;
  ::google::protobuf::uint32 number_of_aligned_reads_;
  ::google::protobuf::uint32 constant_query_length_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > target_length_;
  ::std::string* aligner_name_;
  ::std::string* aligner_version_;
  ::std::string* version_;
  bool sorted_;
  bool indexed_;
  bool query_lengths_stored_in_entries_;
  bool query_indices_were_permuted_;
  bool query_index_occurrences_;
  bool ambiguity_stored_in_entries_;
  bool all_read_quality_scores_;
  ::google::protobuf::RepeatedPtrField< ::std::string> sample_basename_;
  ::google::protobuf::RepeatedPtrField< ::goby::ReadOriginInfo > read_origin_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(22 + 31) / 32];
  
  friend void  protobuf_AddDesc_Alignments_2eproto();
  friend void protobuf_AssignDesc_Alignments_2eproto();
  friend void protobuf_ShutdownFile_Alignments_2eproto();
  
  void InitAsDefaultInstance();
  static AlignmentHeader* default_instance_;
};
// -------------------------------------------------------------------

class IdentifierMapping : public ::google::protobuf::Message {
 public:
  IdentifierMapping();
  virtual ~IdentifierMapping();
  
  IdentifierMapping(const IdentifierMapping& from);
  
  inline IdentifierMapping& operator=(const IdentifierMapping& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const IdentifierMapping& default_instance();
  
  void Swap(IdentifierMapping* other);
  
  // implements Message ----------------------------------------------
  
  IdentifierMapping* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IdentifierMapping& from);
  void MergeFrom(const IdentifierMapping& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .goby.IdentifierInfo mappings = 1;
  inline int mappings_size() const;
  inline void clear_mappings();
  static const int kMappingsFieldNumber = 1;
  inline const ::goby::IdentifierInfo& mappings(int index) const;
  inline ::goby::IdentifierInfo* mutable_mappings(int index);
  inline ::goby::IdentifierInfo* add_mappings();
  inline const ::google::protobuf::RepeatedPtrField< ::goby::IdentifierInfo >&
      mappings() const;
  inline ::google::protobuf::RepeatedPtrField< ::goby::IdentifierInfo >*
      mutable_mappings();
  
  // @@protoc_insertion_point(class_scope:goby.IdentifierMapping)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::goby::IdentifierInfo > mappings_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_Alignments_2eproto();
  friend void protobuf_AssignDesc_Alignments_2eproto();
  friend void protobuf_ShutdownFile_Alignments_2eproto();
  
  void InitAsDefaultInstance();
  static IdentifierMapping* default_instance_;
};
// -------------------------------------------------------------------

class IdentifierInfo : public ::google::protobuf::Message {
 public:
  IdentifierInfo();
  virtual ~IdentifierInfo();
  
  IdentifierInfo(const IdentifierInfo& from);
  
  inline IdentifierInfo& operator=(const IdentifierInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const IdentifierInfo& default_instance();
  
  void Swap(IdentifierInfo* other);
  
  // implements Message ----------------------------------------------
  
  IdentifierInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IdentifierInfo& from);
  void MergeFrom(const IdentifierInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required uint32 index = 2;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:goby.IdentifierInfo)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_index();
  inline void clear_has_index();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::uint32 index_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_Alignments_2eproto();
  friend void protobuf_AssignDesc_Alignments_2eproto();
  friend void protobuf_ShutdownFile_Alignments_2eproto();
  
  void InitAsDefaultInstance();
  static IdentifierInfo* default_instance_;
};
// -------------------------------------------------------------------

class ReadOriginInfo : public ::google::protobuf::Message {
 public:
  ReadOriginInfo();
  virtual ~ReadOriginInfo();
  
  ReadOriginInfo(const ReadOriginInfo& from);
  
  inline ReadOriginInfo& operator=(const ReadOriginInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReadOriginInfo& default_instance();
  
  void Swap(ReadOriginInfo* other);
  
  // implements Message ----------------------------------------------
  
  ReadOriginInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReadOriginInfo& from);
  void MergeFrom(const ReadOriginInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 origin_index = 1;
  inline bool has_origin_index() const;
  inline void clear_origin_index();
  static const int kOriginIndexFieldNumber = 1;
  inline ::google::protobuf::uint32 origin_index() const;
  inline void set_origin_index(::google::protobuf::uint32 value);
  
  // required string origin_id = 2;
  inline bool has_origin_id() const;
  inline void clear_origin_id();
  static const int kOriginIdFieldNumber = 2;
  inline const ::std::string& origin_id() const;
  inline void set_origin_id(const ::std::string& value);
  inline void set_origin_id(const char* value);
  inline void set_origin_id(const char* value, size_t size);
  inline ::std::string* mutable_origin_id();
  inline ::std::string* release_origin_id();
  
  // optional string sample = 4;
  inline bool has_sample() const;
  inline void clear_sample();
  static const int kSampleFieldNumber = 4;
  inline const ::std::string& sample() const;
  inline void set_sample(const ::std::string& value);
  inline void set_sample(const char* value);
  inline void set_sample(const char* value, size_t size);
  inline ::std::string* mutable_sample();
  inline ::std::string* release_sample();
  
  // optional string platform = 5;
  inline bool has_platform() const;
  inline void clear_platform();
  static const int kPlatformFieldNumber = 5;
  inline const ::std::string& platform() const;
  inline void set_platform(const ::std::string& value);
  inline void set_platform(const char* value);
  inline void set_platform(const char* value, size_t size);
  inline ::std::string* mutable_platform();
  inline ::std::string* release_platform();
  
  // optional string library = 8;
  inline bool has_library() const;
  inline void clear_library();
  static const int kLibraryFieldNumber = 8;
  inline const ::std::string& library() const;
  inline void set_library(const ::std::string& value);
  inline void set_library(const char* value);
  inline void set_library(const char* value, size_t size);
  inline ::std::string* mutable_library();
  inline ::std::string* release_library();
  
  // optional string platform_unit = 12;
  inline bool has_platform_unit() const;
  inline void clear_platform_unit();
  static const int kPlatformUnitFieldNumber = 12;
  inline const ::std::string& platform_unit() const;
  inline void set_platform_unit(const ::std::string& value);
  inline void set_platform_unit(const char* value);
  inline void set_platform_unit(const char* value, size_t size);
  inline ::std::string* mutable_platform_unit();
  inline ::std::string* release_platform_unit();
  
  // optional string run_date = 6;
  inline bool has_run_date() const;
  inline void clear_run_date();
  static const int kRunDateFieldNumber = 6;
  inline const ::std::string& run_date() const;
  inline void set_run_date(const ::std::string& value);
  inline void set_run_date(const char* value);
  inline void set_run_date(const char* value, size_t size);
  inline ::std::string* mutable_run_date();
  inline ::std::string* release_run_date();
  
  // @@protoc_insertion_point(class_scope:goby.ReadOriginInfo)
 private:
  inline void set_has_origin_index();
  inline void clear_has_origin_index();
  inline void set_has_origin_id();
  inline void clear_has_origin_id();
  inline void set_has_sample();
  inline void clear_has_sample();
  inline void set_has_platform();
  inline void clear_has_platform();
  inline void set_has_library();
  inline void clear_has_library();
  inline void set_has_platform_unit();
  inline void clear_has_platform_unit();
  inline void set_has_run_date();
  inline void clear_has_run_date();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* origin_id_;
  ::std::string* sample_;
  ::std::string* platform_;
  ::std::string* library_;
  ::std::string* platform_unit_;
  ::std::string* run_date_;
  ::google::protobuf::uint32 origin_index_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_Alignments_2eproto();
  friend void protobuf_AssignDesc_Alignments_2eproto();
  friend void protobuf_ShutdownFile_Alignments_2eproto();
  
  void InitAsDefaultInstance();
  static ReadOriginInfo* default_instance_;
};
// -------------------------------------------------------------------

class AlignmentTooManyHits : public ::google::protobuf::Message {
 public:
  AlignmentTooManyHits();
  virtual ~AlignmentTooManyHits();
  
  AlignmentTooManyHits(const AlignmentTooManyHits& from);
  
  inline AlignmentTooManyHits& operator=(const AlignmentTooManyHits& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AlignmentTooManyHits& default_instance();
  
  void Swap(AlignmentTooManyHits* other);
  
  // implements Message ----------------------------------------------
  
  AlignmentTooManyHits* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AlignmentTooManyHits& from);
  void MergeFrom(const AlignmentTooManyHits& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 aligner_threshold = 2;
  inline bool has_aligner_threshold() const;
  inline void clear_aligner_threshold();
  static const int kAlignerThresholdFieldNumber = 2;
  inline ::google::protobuf::uint32 aligner_threshold() const;
  inline void set_aligner_threshold(::google::protobuf::uint32 value);
  
  // repeated .goby.AmbiguousLocation hits = 1;
  inline int hits_size() const;
  inline void clear_hits();
  static const int kHitsFieldNumber = 1;
  inline const ::goby::AmbiguousLocation& hits(int index) const;
  inline ::goby::AmbiguousLocation* mutable_hits(int index);
  inline ::goby::AmbiguousLocation* add_hits();
  inline const ::google::protobuf::RepeatedPtrField< ::goby::AmbiguousLocation >&
      hits() const;
  inline ::google::protobuf::RepeatedPtrField< ::goby::AmbiguousLocation >*
      mutable_hits();
  
  // @@protoc_insertion_point(class_scope:goby.AlignmentTooManyHits)
 private:
  inline void set_has_aligner_threshold();
  inline void clear_has_aligner_threshold();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::goby::AmbiguousLocation > hits_;
  ::google::protobuf::uint32 aligner_threshold_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_Alignments_2eproto();
  friend void protobuf_AssignDesc_Alignments_2eproto();
  friend void protobuf_ShutdownFile_Alignments_2eproto();
  
  void InitAsDefaultInstance();
  static AlignmentTooManyHits* default_instance_;
};
// -------------------------------------------------------------------

class AmbiguousLocation : public ::google::protobuf::Message {
 public:
  AmbiguousLocation();
  virtual ~AmbiguousLocation();
  
  AmbiguousLocation(const AmbiguousLocation& from);
  
  inline AmbiguousLocation& operator=(const AmbiguousLocation& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AmbiguousLocation& default_instance();
  
  void Swap(AmbiguousLocation* other);
  
  // implements Message ----------------------------------------------
  
  AmbiguousLocation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AmbiguousLocation& from);
  void MergeFrom(const AmbiguousLocation& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 query_index = 1;
  inline bool has_query_index() const;
  inline void clear_query_index();
  static const int kQueryIndexFieldNumber = 1;
  inline ::google::protobuf::uint32 query_index() const;
  inline void set_query_index(::google::protobuf::uint32 value);
  
  // required uint32 at_least_number_of_hits = 2;
  inline bool has_at_least_number_of_hits() const;
  inline void clear_at_least_number_of_hits();
  static const int kAtLeastNumberOfHitsFieldNumber = 2;
  inline ::google::protobuf::uint32 at_least_number_of_hits() const;
  inline void set_at_least_number_of_hits(::google::protobuf::uint32 value);
  
  // optional uint32 length_of_match = 3;
  inline bool has_length_of_match() const;
  inline void clear_length_of_match();
  static const int kLengthOfMatchFieldNumber = 3;
  inline ::google::protobuf::uint32 length_of_match() const;
  inline void set_length_of_match(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:goby.AmbiguousLocation)
 private:
  inline void set_has_query_index();
  inline void clear_has_query_index();
  inline void set_has_at_least_number_of_hits();
  inline void clear_has_at_least_number_of_hits();
  inline void set_has_length_of_match();
  inline void clear_has_length_of_match();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 query_index_;
  ::google::protobuf::uint32 at_least_number_of_hits_;
  ::google::protobuf::uint32 length_of_match_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_Alignments_2eproto();
  friend void protobuf_AssignDesc_Alignments_2eproto();
  friend void protobuf_ShutdownFile_Alignments_2eproto();
  
  void InitAsDefaultInstance();
  static AmbiguousLocation* default_instance_;
};
// -------------------------------------------------------------------

class AlignmentIndex : public ::google::protobuf::Message {
 public:
  AlignmentIndex();
  virtual ~AlignmentIndex();
  
  AlignmentIndex(const AlignmentIndex& from);
  
  inline AlignmentIndex& operator=(const AlignmentIndex& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AlignmentIndex& default_instance();
  
  void Swap(AlignmentIndex* other);
  
  // implements Message ----------------------------------------------
  
  AlignmentIndex* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AlignmentIndex& from);
  void MergeFrom(const AlignmentIndex& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated uint32 target_position_offsets = 1 [packed = true];
  inline int target_position_offsets_size() const;
  inline void clear_target_position_offsets();
  static const int kTargetPositionOffsetsFieldNumber = 1;
  inline ::google::protobuf::uint32 target_position_offsets(int index) const;
  inline void set_target_position_offsets(int index, ::google::protobuf::uint32 value);
  inline void add_target_position_offsets(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      target_position_offsets() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_target_position_offsets();
  
  // repeated uint64 offsets = 2 [packed = true];
  inline int offsets_size() const;
  inline void clear_offsets();
  static const int kOffsetsFieldNumber = 2;
  inline ::google::protobuf::uint64 offsets(int index) const;
  inline void set_offsets(int index, ::google::protobuf::uint64 value);
  inline void add_offsets(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      offsets() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_offsets();
  
  // repeated uint64 absolute_positions = 3 [packed = true];
  inline int absolute_positions_size() const;
  inline void clear_absolute_positions();
  static const int kAbsolutePositionsFieldNumber = 3;
  inline ::google::protobuf::uint64 absolute_positions(int index) const;
  inline void set_absolute_positions(int index, ::google::protobuf::uint64 value);
  inline void add_absolute_positions(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      absolute_positions() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_absolute_positions();
  
  // @@protoc_insertion_point(class_scope:goby.AlignmentIndex)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > target_position_offsets_;
  mutable int _target_position_offsets_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > offsets_;
  mutable int _offsets_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > absolute_positions_;
  mutable int _absolute_positions_cached_byte_size_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_Alignments_2eproto();
  friend void protobuf_AssignDesc_Alignments_2eproto();
  friend void protobuf_ShutdownFile_Alignments_2eproto();
  
  void InitAsDefaultInstance();
  static AlignmentIndex* default_instance_;
};
// ===================================================================


// ===================================================================

// AlignmentCollection

// repeated .goby.AlignmentEntry alignment_entries = 1;
inline int AlignmentCollection::alignment_entries_size() const {
  return alignment_entries_.size();
}
inline void AlignmentCollection::clear_alignment_entries() {
  alignment_entries_.Clear();
}
inline const ::goby::AlignmentEntry& AlignmentCollection::alignment_entries(int index) const {
  return alignment_entries_.Get(index);
}
inline ::goby::AlignmentEntry* AlignmentCollection::mutable_alignment_entries(int index) {
  return alignment_entries_.Mutable(index);
}
inline ::goby::AlignmentEntry* AlignmentCollection::add_alignment_entries() {
  return alignment_entries_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::goby::AlignmentEntry >&
AlignmentCollection::alignment_entries() const {
  return alignment_entries_;
}
inline ::google::protobuf::RepeatedPtrField< ::goby::AlignmentEntry >*
AlignmentCollection::mutable_alignment_entries() {
  return &alignment_entries_;
}

// -------------------------------------------------------------------

// AlignmentEntry

// optional uint32 multiplicity = 7;
inline bool AlignmentEntry::has_multiplicity() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AlignmentEntry::set_has_multiplicity() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AlignmentEntry::clear_has_multiplicity() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AlignmentEntry::clear_multiplicity() {
  multiplicity_ = 0u;
  clear_has_multiplicity();
}
inline ::google::protobuf::uint32 AlignmentEntry::multiplicity() const {
  return multiplicity_;
}
inline void AlignmentEntry::set_multiplicity(::google::protobuf::uint32 value) {
  set_has_multiplicity();
  multiplicity_ = value;
}

// optional uint32 query_index = 1;
inline bool AlignmentEntry::has_query_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AlignmentEntry::set_has_query_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AlignmentEntry::clear_has_query_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AlignmentEntry::clear_query_index() {
  query_index_ = 0u;
  clear_has_query_index();
}
inline ::google::protobuf::uint32 AlignmentEntry::query_index() const {
  return query_index_;
}
inline void AlignmentEntry::set_query_index(::google::protobuf::uint32 value) {
  set_has_query_index();
  query_index_ = value;
}

// optional uint32 target_index = 2;
inline bool AlignmentEntry::has_target_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AlignmentEntry::set_has_target_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AlignmentEntry::clear_has_target_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AlignmentEntry::clear_target_index() {
  target_index_ = 0u;
  clear_has_target_index();
}
inline ::google::protobuf::uint32 AlignmentEntry::target_index() const {
  return target_index_;
}
inline void AlignmentEntry::set_target_index(::google::protobuf::uint32 value) {
  set_has_target_index();
  target_index_ = value;
}

// optional uint32 position = 3;
inline bool AlignmentEntry::has_position() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AlignmentEntry::set_has_position() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AlignmentEntry::clear_has_position() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AlignmentEntry::clear_position() {
  position_ = 0u;
  clear_has_position();
}
inline ::google::protobuf::uint32 AlignmentEntry::position() const {
  return position_;
}
inline void AlignmentEntry::set_position(::google::protobuf::uint32 value) {
  set_has_position();
  position_ = value;
}

// optional bool matching_reverse_strand = 6;
inline bool AlignmentEntry::has_matching_reverse_strand() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AlignmentEntry::set_has_matching_reverse_strand() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AlignmentEntry::clear_has_matching_reverse_strand() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AlignmentEntry::clear_matching_reverse_strand() {
  matching_reverse_strand_ = false;
  clear_has_matching_reverse_strand();
}
inline bool AlignmentEntry::matching_reverse_strand() const {
  return matching_reverse_strand_;
}
inline void AlignmentEntry::set_matching_reverse_strand(bool value) {
  set_has_matching_reverse_strand();
  matching_reverse_strand_ = value;
}

// optional uint32 query_position = 5;
inline bool AlignmentEntry::has_query_position() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AlignmentEntry::set_has_query_position() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AlignmentEntry::clear_has_query_position() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AlignmentEntry::clear_query_position() {
  query_position_ = 0u;
  clear_has_query_position();
}
inline ::google::protobuf::uint32 AlignmentEntry::query_position() const {
  return query_position_;
}
inline void AlignmentEntry::set_query_position(::google::protobuf::uint32 value) {
  set_has_query_position();
  query_position_ = value;
}

// optional float score = 4;
inline bool AlignmentEntry::has_score() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AlignmentEntry::set_has_score() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AlignmentEntry::clear_has_score() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AlignmentEntry::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline float AlignmentEntry::score() const {
  return score_;
}
inline void AlignmentEntry::set_score(float value) {
  set_has_score();
  score_ = value;
}

// optional uint32 number_of_mismatches = 8;
inline bool AlignmentEntry::has_number_of_mismatches() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AlignmentEntry::set_has_number_of_mismatches() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AlignmentEntry::clear_has_number_of_mismatches() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AlignmentEntry::clear_number_of_mismatches() {
  number_of_mismatches_ = 0u;
  clear_has_number_of_mismatches();
}
inline ::google::protobuf::uint32 AlignmentEntry::number_of_mismatches() const {
  return number_of_mismatches_;
}
inline void AlignmentEntry::set_number_of_mismatches(::google::protobuf::uint32 value) {
  set_has_number_of_mismatches();
  number_of_mismatches_ = value;
}

// optional uint32 number_of_indels = 9;
inline bool AlignmentEntry::has_number_of_indels() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AlignmentEntry::set_has_number_of_indels() {
  _has_bits_[0] |= 0x00000100u;
}
inline void AlignmentEntry::clear_has_number_of_indels() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void AlignmentEntry::clear_number_of_indels() {
  number_of_indels_ = 0u;
  clear_has_number_of_indels();
}
inline ::google::protobuf::uint32 AlignmentEntry::number_of_indels() const {
  return number_of_indels_;
}
inline void AlignmentEntry::set_number_of_indels(::google::protobuf::uint32 value) {
  set_has_number_of_indels();
  number_of_indels_ = value;
}

// optional uint32 query_aligned_length = 11;
inline bool AlignmentEntry::has_query_aligned_length() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void AlignmentEntry::set_has_query_aligned_length() {
  _has_bits_[0] |= 0x00000200u;
}
inline void AlignmentEntry::clear_has_query_aligned_length() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void AlignmentEntry::clear_query_aligned_length() {
  query_aligned_length_ = 0u;
  clear_has_query_aligned_length();
}
inline ::google::protobuf::uint32 AlignmentEntry::query_aligned_length() const {
  return query_aligned_length_;
}
inline void AlignmentEntry::set_query_aligned_length(::google::protobuf::uint32 value) {
  set_has_query_aligned_length();
  query_aligned_length_ = value;
}

// optional uint32 target_aligned_length = 12;
inline bool AlignmentEntry::has_target_aligned_length() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void AlignmentEntry::set_has_target_aligned_length() {
  _has_bits_[0] |= 0x00000400u;
}
inline void AlignmentEntry::clear_has_target_aligned_length() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void AlignmentEntry::clear_target_aligned_length() {
  target_aligned_length_ = 0u;
  clear_has_target_aligned_length();
}
inline ::google::protobuf::uint32 AlignmentEntry::target_aligned_length() const {
  return target_aligned_length_;
}
inline void AlignmentEntry::set_target_aligned_length(::google::protobuf::uint32 value) {
  set_has_target_aligned_length();
  target_aligned_length_ = value;
}

// repeated .goby.SequenceVariation sequence_variations = 13;
inline int AlignmentEntry::sequence_variations_size() const {
  return sequence_variations_.size();
}
inline void AlignmentEntry::clear_sequence_variations() {
  sequence_variations_.Clear();
}
inline const ::goby::SequenceVariation& AlignmentEntry::sequence_variations(int index) const {
  return sequence_variations_.Get(index);
}
inline ::goby::SequenceVariation* AlignmentEntry::mutable_sequence_variations(int index) {
  return sequence_variations_.Mutable(index);
}
inline ::goby::SequenceVariation* AlignmentEntry::add_sequence_variations() {
  return sequence_variations_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::goby::SequenceVariation >&
AlignmentEntry::sequence_variations() const {
  return sequence_variations_;
}
inline ::google::protobuf::RepeatedPtrField< ::goby::SequenceVariation >*
AlignmentEntry::mutable_sequence_variations() {
  return &sequence_variations_;
}

// optional uint32 query_length = 10;
inline bool AlignmentEntry::has_query_length() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void AlignmentEntry::set_has_query_length() {
  _has_bits_[0] |= 0x00001000u;
}
inline void AlignmentEntry::clear_has_query_length() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void AlignmentEntry::clear_query_length() {
  query_length_ = 0u;
  clear_has_query_length();
}
inline ::google::protobuf::uint32 AlignmentEntry::query_length() const {
  return query_length_;
}
inline void AlignmentEntry::set_query_length(::google::protobuf::uint32 value) {
  set_has_query_length();
  query_length_ = value;
}

// optional int32 mapping_quality = 14;
inline bool AlignmentEntry::has_mapping_quality() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void AlignmentEntry::set_has_mapping_quality() {
  _has_bits_[0] |= 0x00002000u;
}
inline void AlignmentEntry::clear_has_mapping_quality() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void AlignmentEntry::clear_mapping_quality() {
  mapping_quality_ = 0;
  clear_has_mapping_quality();
}
inline ::google::protobuf::int32 AlignmentEntry::mapping_quality() const {
  return mapping_quality_;
}
inline void AlignmentEntry::set_mapping_quality(::google::protobuf::int32 value) {
  set_has_mapping_quality();
  mapping_quality_ = value;
}

// optional uint32 pair_flags = 15;
inline bool AlignmentEntry::has_pair_flags() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void AlignmentEntry::set_has_pair_flags() {
  _has_bits_[0] |= 0x00004000u;
}
inline void AlignmentEntry::clear_has_pair_flags() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void AlignmentEntry::clear_pair_flags() {
  pair_flags_ = 0u;
  clear_has_pair_flags();
}
inline ::google::protobuf::uint32 AlignmentEntry::pair_flags() const {
  return pair_flags_;
}
inline void AlignmentEntry::set_pair_flags(::google::protobuf::uint32 value) {
  set_has_pair_flags();
  pair_flags_ = value;
}

// optional .goby.RelatedAlignmentEntry pair_alignment_link = 16;
inline bool AlignmentEntry::has_pair_alignment_link() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void AlignmentEntry::set_has_pair_alignment_link() {
  _has_bits_[0] |= 0x00008000u;
}
inline void AlignmentEntry::clear_has_pair_alignment_link() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void AlignmentEntry::clear_pair_alignment_link() {
  if (pair_alignment_link_ != NULL) pair_alignment_link_->::goby::RelatedAlignmentEntry::Clear();
  clear_has_pair_alignment_link();
}
inline const ::goby::RelatedAlignmentEntry& AlignmentEntry::pair_alignment_link() const {
  return pair_alignment_link_ != NULL ? *pair_alignment_link_ : *default_instance_->pair_alignment_link_;
}
inline ::goby::RelatedAlignmentEntry* AlignmentEntry::mutable_pair_alignment_link() {
  set_has_pair_alignment_link();
  if (pair_alignment_link_ == NULL) pair_alignment_link_ = new ::goby::RelatedAlignmentEntry;
  return pair_alignment_link_;
}
inline ::goby::RelatedAlignmentEntry* AlignmentEntry::release_pair_alignment_link() {
  clear_has_pair_alignment_link();
  ::goby::RelatedAlignmentEntry* temp = pair_alignment_link_;
  pair_alignment_link_ = NULL;
  return temp;
}

// optional uint32 fragment_index = 17;
inline bool AlignmentEntry::has_fragment_index() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void AlignmentEntry::set_has_fragment_index() {
  _has_bits_[0] |= 0x00010000u;
}
inline void AlignmentEntry::clear_has_fragment_index() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void AlignmentEntry::clear_fragment_index() {
  fragment_index_ = 0u;
  clear_has_fragment_index();
}
inline ::google::protobuf::uint32 AlignmentEntry::fragment_index() const {
  return fragment_index_;
}
inline void AlignmentEntry::set_fragment_index(::google::protobuf::uint32 value) {
  set_has_fragment_index();
  fragment_index_ = value;
}

// optional .goby.RelatedAlignmentEntry spliced_forward_alignment_link = 18;
inline bool AlignmentEntry::has_spliced_forward_alignment_link() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void AlignmentEntry::set_has_spliced_forward_alignment_link() {
  _has_bits_[0] |= 0x00020000u;
}
inline void AlignmentEntry::clear_has_spliced_forward_alignment_link() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void AlignmentEntry::clear_spliced_forward_alignment_link() {
  if (spliced_forward_alignment_link_ != NULL) spliced_forward_alignment_link_->::goby::RelatedAlignmentEntry::Clear();
  clear_has_spliced_forward_alignment_link();
}
inline const ::goby::RelatedAlignmentEntry& AlignmentEntry::spliced_forward_alignment_link() const {
  return spliced_forward_alignment_link_ != NULL ? *spliced_forward_alignment_link_ : *default_instance_->spliced_forward_alignment_link_;
}
inline ::goby::RelatedAlignmentEntry* AlignmentEntry::mutable_spliced_forward_alignment_link() {
  set_has_spliced_forward_alignment_link();
  if (spliced_forward_alignment_link_ == NULL) spliced_forward_alignment_link_ = new ::goby::RelatedAlignmentEntry;
  return spliced_forward_alignment_link_;
}
inline ::goby::RelatedAlignmentEntry* AlignmentEntry::release_spliced_forward_alignment_link() {
  clear_has_spliced_forward_alignment_link();
  ::goby::RelatedAlignmentEntry* temp = spliced_forward_alignment_link_;
  spliced_forward_alignment_link_ = NULL;
  return temp;
}

// optional .goby.RelatedAlignmentEntry spliced_backward_alignment_link = 22;
inline bool AlignmentEntry::has_spliced_backward_alignment_link() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void AlignmentEntry::set_has_spliced_backward_alignment_link() {
  _has_bits_[0] |= 0x00040000u;
}
inline void AlignmentEntry::clear_has_spliced_backward_alignment_link() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void AlignmentEntry::clear_spliced_backward_alignment_link() {
  if (spliced_backward_alignment_link_ != NULL) spliced_backward_alignment_link_->::goby::RelatedAlignmentEntry::Clear();
  clear_has_spliced_backward_alignment_link();
}
inline const ::goby::RelatedAlignmentEntry& AlignmentEntry::spliced_backward_alignment_link() const {
  return spliced_backward_alignment_link_ != NULL ? *spliced_backward_alignment_link_ : *default_instance_->spliced_backward_alignment_link_;
}
inline ::goby::RelatedAlignmentEntry* AlignmentEntry::mutable_spliced_backward_alignment_link() {
  set_has_spliced_backward_alignment_link();
  if (spliced_backward_alignment_link_ == NULL) spliced_backward_alignment_link_ = new ::goby::RelatedAlignmentEntry;
  return spliced_backward_alignment_link_;
}
inline ::goby::RelatedAlignmentEntry* AlignmentEntry::release_spliced_backward_alignment_link() {
  clear_has_spliced_backward_alignment_link();
  ::goby::RelatedAlignmentEntry* temp = spliced_backward_alignment_link_;
  spliced_backward_alignment_link_ = NULL;
  return temp;
}

// optional uint32 spliced_flags = 19;
inline bool AlignmentEntry::has_spliced_flags() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void AlignmentEntry::set_has_spliced_flags() {
  _has_bits_[0] |= 0x00080000u;
}
inline void AlignmentEntry::clear_has_spliced_flags() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void AlignmentEntry::clear_spliced_flags() {
  spliced_flags_ = 0u;
  clear_has_spliced_flags();
}
inline ::google::protobuf::uint32 AlignmentEntry::spliced_flags() const {
  return spliced_flags_;
}
inline void AlignmentEntry::set_spliced_flags(::google::protobuf::uint32 value) {
  set_has_spliced_flags();
  spliced_flags_ = value;
}

// optional uint32 insert_size = 20;
inline bool AlignmentEntry::has_insert_size() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void AlignmentEntry::set_has_insert_size() {
  _has_bits_[0] |= 0x00100000u;
}
inline void AlignmentEntry::clear_has_insert_size() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void AlignmentEntry::clear_insert_size() {
  insert_size_ = 0u;
  clear_has_insert_size();
}
inline ::google::protobuf::uint32 AlignmentEntry::insert_size() const {
  return insert_size_;
}
inline void AlignmentEntry::set_insert_size(::google::protobuf::uint32 value) {
  set_has_insert_size();
  insert_size_ = value;
}

// optional uint32 sample_index = 21;
inline bool AlignmentEntry::has_sample_index() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void AlignmentEntry::set_has_sample_index() {
  _has_bits_[0] |= 0x00200000u;
}
inline void AlignmentEntry::clear_has_sample_index() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void AlignmentEntry::clear_sample_index() {
  sample_index_ = 0u;
  clear_has_sample_index();
}
inline ::google::protobuf::uint32 AlignmentEntry::sample_index() const {
  return sample_index_;
}
inline void AlignmentEntry::set_sample_index(::google::protobuf::uint32 value) {
  set_has_sample_index();
  sample_index_ = value;
}

// optional uint32 query_index_occurrences = 25;
inline bool AlignmentEntry::has_query_index_occurrences() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void AlignmentEntry::set_has_query_index_occurrences() {
  _has_bits_[0] |= 0x00400000u;
}
inline void AlignmentEntry::clear_has_query_index_occurrences() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void AlignmentEntry::clear_query_index_occurrences() {
  query_index_occurrences_ = 0u;
  clear_has_query_index_occurrences();
}
inline ::google::protobuf::uint32 AlignmentEntry::query_index_occurrences() const {
  return query_index_occurrences_;
}
inline void AlignmentEntry::set_query_index_occurrences(::google::protobuf::uint32 value) {
  set_has_query_index_occurrences();
  query_index_occurrences_ = value;
}

// optional uint32 ambiguity = 27;
inline bool AlignmentEntry::has_ambiguity() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void AlignmentEntry::set_has_ambiguity() {
  _has_bits_[0] |= 0x00800000u;
}
inline void AlignmentEntry::clear_has_ambiguity() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void AlignmentEntry::clear_ambiguity() {
  ambiguity_ = 0u;
  clear_has_ambiguity();
}
inline ::google::protobuf::uint32 AlignmentEntry::ambiguity() const {
  return ambiguity_;
}
inline void AlignmentEntry::set_ambiguity(::google::protobuf::uint32 value) {
  set_has_ambiguity();
  ambiguity_ = value;
}

// repeated string bam_attributes = 50;
inline int AlignmentEntry::bam_attributes_size() const {
  return bam_attributes_.size();
}
inline void AlignmentEntry::clear_bam_attributes() {
  bam_attributes_.Clear();
}
inline const ::std::string& AlignmentEntry::bam_attributes(int index) const {
  return bam_attributes_.Get(index);
}
inline ::std::string* AlignmentEntry::mutable_bam_attributes(int index) {
  return bam_attributes_.Mutable(index);
}
inline void AlignmentEntry::set_bam_attributes(int index, const ::std::string& value) {
  bam_attributes_.Mutable(index)->assign(value);
}
inline void AlignmentEntry::set_bam_attributes(int index, const char* value) {
  bam_attributes_.Mutable(index)->assign(value);
}
inline void AlignmentEntry::set_bam_attributes(int index, const char* value, size_t size) {
  bam_attributes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AlignmentEntry::add_bam_attributes() {
  return bam_attributes_.Add();
}
inline void AlignmentEntry::add_bam_attributes(const ::std::string& value) {
  bam_attributes_.Add()->assign(value);
}
inline void AlignmentEntry::add_bam_attributes(const char* value) {
  bam_attributes_.Add()->assign(value);
}
inline void AlignmentEntry::add_bam_attributes(const char* value, size_t size) {
  bam_attributes_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AlignmentEntry::bam_attributes() const {
  return bam_attributes_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AlignmentEntry::mutable_bam_attributes() {
  return &bam_attributes_;
}

// optional bytes read_quality_scores = 55;
inline bool AlignmentEntry::has_read_quality_scores() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void AlignmentEntry::set_has_read_quality_scores() {
  _has_bits_[0] |= 0x02000000u;
}
inline void AlignmentEntry::clear_has_read_quality_scores() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void AlignmentEntry::clear_read_quality_scores() {
  if (read_quality_scores_ != &::google::protobuf::internal::kEmptyString) {
    read_quality_scores_->clear();
  }
  clear_has_read_quality_scores();
}
inline const ::std::string& AlignmentEntry::read_quality_scores() const {
  return *read_quality_scores_;
}
inline void AlignmentEntry::set_read_quality_scores(const ::std::string& value) {
  set_has_read_quality_scores();
  if (read_quality_scores_ == &::google::protobuf::internal::kEmptyString) {
    read_quality_scores_ = new ::std::string;
  }
  read_quality_scores_->assign(value);
}
inline void AlignmentEntry::set_read_quality_scores(const char* value) {
  set_has_read_quality_scores();
  if (read_quality_scores_ == &::google::protobuf::internal::kEmptyString) {
    read_quality_scores_ = new ::std::string;
  }
  read_quality_scores_->assign(value);
}
inline void AlignmentEntry::set_read_quality_scores(const void* value, size_t size) {
  set_has_read_quality_scores();
  if (read_quality_scores_ == &::google::protobuf::internal::kEmptyString) {
    read_quality_scores_ = new ::std::string;
  }
  read_quality_scores_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AlignmentEntry::mutable_read_quality_scores() {
  set_has_read_quality_scores();
  if (read_quality_scores_ == &::google::protobuf::internal::kEmptyString) {
    read_quality_scores_ = new ::std::string;
  }
  return read_quality_scores_;
}
inline ::std::string* AlignmentEntry::release_read_quality_scores() {
  clear_has_read_quality_scores();
  if (read_quality_scores_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = read_quality_scores_;
    read_quality_scores_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 read_origin_index = 26;
inline bool AlignmentEntry::has_read_origin_index() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void AlignmentEntry::set_has_read_origin_index() {
  _has_bits_[0] |= 0x04000000u;
}
inline void AlignmentEntry::clear_has_read_origin_index() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void AlignmentEntry::clear_read_origin_index() {
  read_origin_index_ = 0u;
  clear_has_read_origin_index();
}
inline ::google::protobuf::uint32 AlignmentEntry::read_origin_index() const {
  return read_origin_index_;
}
inline void AlignmentEntry::set_read_origin_index(::google::protobuf::uint32 value) {
  set_has_read_origin_index();
  read_origin_index_ = value;
}

// optional string softClippedBasesLeft = 30;
inline bool AlignmentEntry::has_softclippedbasesleft() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void AlignmentEntry::set_has_softclippedbasesleft() {
  _has_bits_[0] |= 0x08000000u;
}
inline void AlignmentEntry::clear_has_softclippedbasesleft() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void AlignmentEntry::clear_softclippedbasesleft() {
  if (softclippedbasesleft_ != &::google::protobuf::internal::kEmptyString) {
    softclippedbasesleft_->clear();
  }
  clear_has_softclippedbasesleft();
}
inline const ::std::string& AlignmentEntry::softclippedbasesleft() const {
  return *softclippedbasesleft_;
}
inline void AlignmentEntry::set_softclippedbasesleft(const ::std::string& value) {
  set_has_softclippedbasesleft();
  if (softclippedbasesleft_ == &::google::protobuf::internal::kEmptyString) {
    softclippedbasesleft_ = new ::std::string;
  }
  softclippedbasesleft_->assign(value);
}
inline void AlignmentEntry::set_softclippedbasesleft(const char* value) {
  set_has_softclippedbasesleft();
  if (softclippedbasesleft_ == &::google::protobuf::internal::kEmptyString) {
    softclippedbasesleft_ = new ::std::string;
  }
  softclippedbasesleft_->assign(value);
}
inline void AlignmentEntry::set_softclippedbasesleft(const char* value, size_t size) {
  set_has_softclippedbasesleft();
  if (softclippedbasesleft_ == &::google::protobuf::internal::kEmptyString) {
    softclippedbasesleft_ = new ::std::string;
  }
  softclippedbasesleft_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AlignmentEntry::mutable_softclippedbasesleft() {
  set_has_softclippedbasesleft();
  if (softclippedbasesleft_ == &::google::protobuf::internal::kEmptyString) {
    softclippedbasesleft_ = new ::std::string;
  }
  return softclippedbasesleft_;
}
inline ::std::string* AlignmentEntry::release_softclippedbasesleft() {
  clear_has_softclippedbasesleft();
  if (softclippedbasesleft_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = softclippedbasesleft_;
    softclippedbasesleft_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string softClippedBasesRight = 31;
inline bool AlignmentEntry::has_softclippedbasesright() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void AlignmentEntry::set_has_softclippedbasesright() {
  _has_bits_[0] |= 0x10000000u;
}
inline void AlignmentEntry::clear_has_softclippedbasesright() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void AlignmentEntry::clear_softclippedbasesright() {
  if (softclippedbasesright_ != &::google::protobuf::internal::kEmptyString) {
    softclippedbasesright_->clear();
  }
  clear_has_softclippedbasesright();
}
inline const ::std::string& AlignmentEntry::softclippedbasesright() const {
  return *softclippedbasesright_;
}
inline void AlignmentEntry::set_softclippedbasesright(const ::std::string& value) {
  set_has_softclippedbasesright();
  if (softclippedbasesright_ == &::google::protobuf::internal::kEmptyString) {
    softclippedbasesright_ = new ::std::string;
  }
  softclippedbasesright_->assign(value);
}
inline void AlignmentEntry::set_softclippedbasesright(const char* value) {
  set_has_softclippedbasesright();
  if (softclippedbasesright_ == &::google::protobuf::internal::kEmptyString) {
    softclippedbasesright_ = new ::std::string;
  }
  softclippedbasesright_->assign(value);
}
inline void AlignmentEntry::set_softclippedbasesright(const char* value, size_t size) {
  set_has_softclippedbasesright();
  if (softclippedbasesright_ == &::google::protobuf::internal::kEmptyString) {
    softclippedbasesright_ = new ::std::string;
  }
  softclippedbasesright_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AlignmentEntry::mutable_softclippedbasesright() {
  set_has_softclippedbasesright();
  if (softclippedbasesright_ == &::google::protobuf::internal::kEmptyString) {
    softclippedbasesright_ = new ::std::string;
  }
  return softclippedbasesright_;
}
inline ::std::string* AlignmentEntry::release_softclippedbasesright() {
  clear_has_softclippedbasesright();
  if (softclippedbasesright_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = softclippedbasesright_;
    softclippedbasesright_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// RelatedAlignmentEntry

// optional uint32 target_index = 1;
inline bool RelatedAlignmentEntry::has_target_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RelatedAlignmentEntry::set_has_target_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RelatedAlignmentEntry::clear_has_target_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RelatedAlignmentEntry::clear_target_index() {
  target_index_ = 0u;
  clear_has_target_index();
}
inline ::google::protobuf::uint32 RelatedAlignmentEntry::target_index() const {
  return target_index_;
}
inline void RelatedAlignmentEntry::set_target_index(::google::protobuf::uint32 value) {
  set_has_target_index();
  target_index_ = value;
}

// optional uint32 position = 2;
inline bool RelatedAlignmentEntry::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RelatedAlignmentEntry::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RelatedAlignmentEntry::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RelatedAlignmentEntry::clear_position() {
  position_ = 0u;
  clear_has_position();
}
inline ::google::protobuf::uint32 RelatedAlignmentEntry::position() const {
  return position_;
}
inline void RelatedAlignmentEntry::set_position(::google::protobuf::uint32 value) {
  set_has_position();
  position_ = value;
}

// optional uint32 fragment_index = 3;
inline bool RelatedAlignmentEntry::has_fragment_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RelatedAlignmentEntry::set_has_fragment_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RelatedAlignmentEntry::clear_has_fragment_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RelatedAlignmentEntry::clear_fragment_index() {
  fragment_index_ = 0u;
  clear_has_fragment_index();
}
inline ::google::protobuf::uint32 RelatedAlignmentEntry::fragment_index() const {
  return fragment_index_;
}
inline void RelatedAlignmentEntry::set_fragment_index(::google::protobuf::uint32 value) {
  set_has_fragment_index();
  fragment_index_ = value;
}

// optional uint32 optimized_index = 50;
inline bool RelatedAlignmentEntry::has_optimized_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RelatedAlignmentEntry::set_has_optimized_index() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RelatedAlignmentEntry::clear_has_optimized_index() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RelatedAlignmentEntry::clear_optimized_index() {
  optimized_index_ = 0u;
  clear_has_optimized_index();
}
inline ::google::protobuf::uint32 RelatedAlignmentEntry::optimized_index() const {
  return optimized_index_;
}
inline void RelatedAlignmentEntry::set_optimized_index(::google::protobuf::uint32 value) {
  set_has_optimized_index();
  optimized_index_ = value;
}

// -------------------------------------------------------------------

// SequenceVariation

// optional string from = 2;
inline bool SequenceVariation::has_from() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SequenceVariation::set_has_from() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SequenceVariation::clear_has_from() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SequenceVariation::clear_from() {
  if (from_ != &::google::protobuf::internal::kEmptyString) {
    from_->clear();
  }
  clear_has_from();
}
inline const ::std::string& SequenceVariation::from() const {
  return *from_;
}
inline void SequenceVariation::set_from(const ::std::string& value) {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  from_->assign(value);
}
inline void SequenceVariation::set_from(const char* value) {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  from_->assign(value);
}
inline void SequenceVariation::set_from(const char* value, size_t size) {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  from_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SequenceVariation::mutable_from() {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  return from_;
}
inline ::std::string* SequenceVariation::release_from() {
  clear_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = from_;
    from_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string to = 1;
inline bool SequenceVariation::has_to() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SequenceVariation::set_has_to() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SequenceVariation::clear_has_to() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SequenceVariation::clear_to() {
  if (to_ != &::google::protobuf::internal::kEmptyString) {
    to_->clear();
  }
  clear_has_to();
}
inline const ::std::string& SequenceVariation::to() const {
  return *to_;
}
inline void SequenceVariation::set_to(const ::std::string& value) {
  set_has_to();
  if (to_ == &::google::protobuf::internal::kEmptyString) {
    to_ = new ::std::string;
  }
  to_->assign(value);
}
inline void SequenceVariation::set_to(const char* value) {
  set_has_to();
  if (to_ == &::google::protobuf::internal::kEmptyString) {
    to_ = new ::std::string;
  }
  to_->assign(value);
}
inline void SequenceVariation::set_to(const char* value, size_t size) {
  set_has_to();
  if (to_ == &::google::protobuf::internal::kEmptyString) {
    to_ = new ::std::string;
  }
  to_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SequenceVariation::mutable_to() {
  set_has_to();
  if (to_ == &::google::protobuf::internal::kEmptyString) {
    to_ = new ::std::string;
  }
  return to_;
}
inline ::std::string* SequenceVariation::release_to() {
  clear_has_to();
  if (to_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = to_;
    to_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 position = 3;
inline bool SequenceVariation::has_position() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SequenceVariation::set_has_position() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SequenceVariation::clear_has_position() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SequenceVariation::clear_position() {
  position_ = 0u;
  clear_has_position();
}
inline ::google::protobuf::uint32 SequenceVariation::position() const {
  return position_;
}
inline void SequenceVariation::set_position(::google::protobuf::uint32 value) {
  set_has_position();
  position_ = value;
}

// optional uint32 read_index = 5;
inline bool SequenceVariation::has_read_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SequenceVariation::set_has_read_index() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SequenceVariation::clear_has_read_index() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SequenceVariation::clear_read_index() {
  read_index_ = 0u;
  clear_has_read_index();
}
inline ::google::protobuf::uint32 SequenceVariation::read_index() const {
  return read_index_;
}
inline void SequenceVariation::set_read_index(::google::protobuf::uint32 value) {
  set_has_read_index();
  read_index_ = value;
}

// optional bytes to_quality = 4;
inline bool SequenceVariation::has_to_quality() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SequenceVariation::set_has_to_quality() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SequenceVariation::clear_has_to_quality() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SequenceVariation::clear_to_quality() {
  if (to_quality_ != &::google::protobuf::internal::kEmptyString) {
    to_quality_->clear();
  }
  clear_has_to_quality();
}
inline const ::std::string& SequenceVariation::to_quality() const {
  return *to_quality_;
}
inline void SequenceVariation::set_to_quality(const ::std::string& value) {
  set_has_to_quality();
  if (to_quality_ == &::google::protobuf::internal::kEmptyString) {
    to_quality_ = new ::std::string;
  }
  to_quality_->assign(value);
}
inline void SequenceVariation::set_to_quality(const char* value) {
  set_has_to_quality();
  if (to_quality_ == &::google::protobuf::internal::kEmptyString) {
    to_quality_ = new ::std::string;
  }
  to_quality_->assign(value);
}
inline void SequenceVariation::set_to_quality(const void* value, size_t size) {
  set_has_to_quality();
  if (to_quality_ == &::google::protobuf::internal::kEmptyString) {
    to_quality_ = new ::std::string;
  }
  to_quality_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SequenceVariation::mutable_to_quality() {
  set_has_to_quality();
  if (to_quality_ == &::google::protobuf::internal::kEmptyString) {
    to_quality_ = new ::std::string;
  }
  return to_quality_;
}
inline ::std::string* SequenceVariation::release_to_quality() {
  clear_has_to_quality();
  if (to_quality_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = to_quality_;
    to_quality_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// AlignmentHeader

// optional uint32 smallest_split_query_index = 9;
inline bool AlignmentHeader::has_smallest_split_query_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AlignmentHeader::set_has_smallest_split_query_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AlignmentHeader::clear_has_smallest_split_query_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AlignmentHeader::clear_smallest_split_query_index() {
  smallest_split_query_index_ = 0u;
  clear_has_smallest_split_query_index();
}
inline ::google::protobuf::uint32 AlignmentHeader::smallest_split_query_index() const {
  return smallest_split_query_index_;
}
inline void AlignmentHeader::set_smallest_split_query_index(::google::protobuf::uint32 value) {
  set_has_smallest_split_query_index();
  smallest_split_query_index_ = value;
}

// optional uint32 largest_split_query_index = 11;
inline bool AlignmentHeader::has_largest_split_query_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AlignmentHeader::set_has_largest_split_query_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AlignmentHeader::clear_has_largest_split_query_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AlignmentHeader::clear_largest_split_query_index() {
  largest_split_query_index_ = 0u;
  clear_has_largest_split_query_index();
}
inline ::google::protobuf::uint32 AlignmentHeader::largest_split_query_index() const {
  return largest_split_query_index_;
}
inline void AlignmentHeader::set_largest_split_query_index(::google::protobuf::uint32 value) {
  set_has_largest_split_query_index();
  largest_split_query_index_ = value;
}

// optional .goby.IdentifierMapping query_name_mapping = 1;
inline bool AlignmentHeader::has_query_name_mapping() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AlignmentHeader::set_has_query_name_mapping() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AlignmentHeader::clear_has_query_name_mapping() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AlignmentHeader::clear_query_name_mapping() {
  if (query_name_mapping_ != NULL) query_name_mapping_->::goby::IdentifierMapping::Clear();
  clear_has_query_name_mapping();
}
inline const ::goby::IdentifierMapping& AlignmentHeader::query_name_mapping() const {
  return query_name_mapping_ != NULL ? *query_name_mapping_ : *default_instance_->query_name_mapping_;
}
inline ::goby::IdentifierMapping* AlignmentHeader::mutable_query_name_mapping() {
  set_has_query_name_mapping();
  if (query_name_mapping_ == NULL) query_name_mapping_ = new ::goby::IdentifierMapping;
  return query_name_mapping_;
}
inline ::goby::IdentifierMapping* AlignmentHeader::release_query_name_mapping() {
  clear_has_query_name_mapping();
  ::goby::IdentifierMapping* temp = query_name_mapping_;
  query_name_mapping_ = NULL;
  return temp;
}

// optional .goby.IdentifierMapping target_name_mapping = 2;
inline bool AlignmentHeader::has_target_name_mapping() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AlignmentHeader::set_has_target_name_mapping() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AlignmentHeader::clear_has_target_name_mapping() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AlignmentHeader::clear_target_name_mapping() {
  if (target_name_mapping_ != NULL) target_name_mapping_->::goby::IdentifierMapping::Clear();
  clear_has_target_name_mapping();
}
inline const ::goby::IdentifierMapping& AlignmentHeader::target_name_mapping() const {
  return target_name_mapping_ != NULL ? *target_name_mapping_ : *default_instance_->target_name_mapping_;
}
inline ::goby::IdentifierMapping* AlignmentHeader::mutable_target_name_mapping() {
  set_has_target_name_mapping();
  if (target_name_mapping_ == NULL) target_name_mapping_ = new ::goby::IdentifierMapping;
  return target_name_mapping_;
}
inline ::goby::IdentifierMapping* AlignmentHeader::release_target_name_mapping() {
  clear_has_target_name_mapping();
  ::goby::IdentifierMapping* temp = target_name_mapping_;
  target_name_mapping_ = NULL;
  return temp;
}

// optional uint32 number_of_queries = 5;
inline bool AlignmentHeader::has_number_of_queries() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AlignmentHeader::set_has_number_of_queries() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AlignmentHeader::clear_has_number_of_queries() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AlignmentHeader::clear_number_of_queries() {
  number_of_queries_ = 0u;
  clear_has_number_of_queries();
}
inline ::google::protobuf::uint32 AlignmentHeader::number_of_queries() const {
  return number_of_queries_;
}
inline void AlignmentHeader::set_number_of_queries(::google::protobuf::uint32 value) {
  set_has_number_of_queries();
  number_of_queries_ = value;
}

// optional uint32 number_of_targets = 6;
inline bool AlignmentHeader::has_number_of_targets() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AlignmentHeader::set_has_number_of_targets() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AlignmentHeader::clear_has_number_of_targets() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AlignmentHeader::clear_number_of_targets() {
  number_of_targets_ = 0u;
  clear_has_number_of_targets();
}
inline ::google::protobuf::uint32 AlignmentHeader::number_of_targets() const {
  return number_of_targets_;
}
inline void AlignmentHeader::set_number_of_targets(::google::protobuf::uint32 value) {
  set_has_number_of_targets();
  number_of_targets_ = value;
}

// optional uint32 number_of_aligned_reads = 7;
inline bool AlignmentHeader::has_number_of_aligned_reads() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AlignmentHeader::set_has_number_of_aligned_reads() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AlignmentHeader::clear_has_number_of_aligned_reads() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AlignmentHeader::clear_number_of_aligned_reads() {
  number_of_aligned_reads_ = 0u;
  clear_has_number_of_aligned_reads();
}
inline ::google::protobuf::uint32 AlignmentHeader::number_of_aligned_reads() const {
  return number_of_aligned_reads_;
}
inline void AlignmentHeader::set_number_of_aligned_reads(::google::protobuf::uint32 value) {
  set_has_number_of_aligned_reads();
  number_of_aligned_reads_ = value;
}

// repeated uint32 query_length = 3 [deprecated = true];
inline int AlignmentHeader::query_length_size() const {
  return query_length_.size();
}
inline void AlignmentHeader::clear_query_length() {
  query_length_.Clear();
}
inline ::google::protobuf::uint32 AlignmentHeader::query_length(int index) const {
  return query_length_.Get(index);
}
inline void AlignmentHeader::set_query_length(int index, ::google::protobuf::uint32 value) {
  query_length_.Set(index, value);
}
inline void AlignmentHeader::add_query_length(::google::protobuf::uint32 value) {
  query_length_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
AlignmentHeader::query_length() const {
  return query_length_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
AlignmentHeader::mutable_query_length() {
  return &query_length_;
}

// optional uint32 constant_query_length = 10;
inline bool AlignmentHeader::has_constant_query_length() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AlignmentHeader::set_has_constant_query_length() {
  _has_bits_[0] |= 0x00000100u;
}
inline void AlignmentHeader::clear_has_constant_query_length() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void AlignmentHeader::clear_constant_query_length() {
  constant_query_length_ = 0u;
  clear_has_constant_query_length();
}
inline ::google::protobuf::uint32 AlignmentHeader::constant_query_length() const {
  return constant_query_length_;
}
inline void AlignmentHeader::set_constant_query_length(::google::protobuf::uint32 value) {
  set_has_constant_query_length();
  constant_query_length_ = value;
}

// repeated uint32 target_length = 8;
inline int AlignmentHeader::target_length_size() const {
  return target_length_.size();
}
inline void AlignmentHeader::clear_target_length() {
  target_length_.Clear();
}
inline ::google::protobuf::uint32 AlignmentHeader::target_length(int index) const {
  return target_length_.Get(index);
}
inline void AlignmentHeader::set_target_length(int index, ::google::protobuf::uint32 value) {
  target_length_.Set(index, value);
}
inline void AlignmentHeader::add_target_length(::google::protobuf::uint32 value) {
  target_length_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
AlignmentHeader::target_length() const {
  return target_length_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
AlignmentHeader::mutable_target_length() {
  return &target_length_;
}

// optional bool sorted = 13;
inline bool AlignmentHeader::has_sorted() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void AlignmentHeader::set_has_sorted() {
  _has_bits_[0] |= 0x00000400u;
}
inline void AlignmentHeader::clear_has_sorted() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void AlignmentHeader::clear_sorted() {
  sorted_ = false;
  clear_has_sorted();
}
inline bool AlignmentHeader::sorted() const {
  return sorted_;
}
inline void AlignmentHeader::set_sorted(bool value) {
  set_has_sorted();
  sorted_ = value;
}

// optional bool indexed = 14;
inline bool AlignmentHeader::has_indexed() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void AlignmentHeader::set_has_indexed() {
  _has_bits_[0] |= 0x00000800u;
}
inline void AlignmentHeader::clear_has_indexed() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void AlignmentHeader::clear_indexed() {
  indexed_ = false;
  clear_has_indexed();
}
inline bool AlignmentHeader::indexed() const {
  return indexed_;
}
inline void AlignmentHeader::set_indexed(bool value) {
  set_has_indexed();
  indexed_ = value;
}

// optional bool query_lengths_stored_in_entries = 15;
inline bool AlignmentHeader::has_query_lengths_stored_in_entries() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void AlignmentHeader::set_has_query_lengths_stored_in_entries() {
  _has_bits_[0] |= 0x00001000u;
}
inline void AlignmentHeader::clear_has_query_lengths_stored_in_entries() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void AlignmentHeader::clear_query_lengths_stored_in_entries() {
  query_lengths_stored_in_entries_ = false;
  clear_has_query_lengths_stored_in_entries();
}
inline bool AlignmentHeader::query_lengths_stored_in_entries() const {
  return query_lengths_stored_in_entries_;
}
inline void AlignmentHeader::set_query_lengths_stored_in_entries(bool value) {
  set_has_query_lengths_stored_in_entries();
  query_lengths_stored_in_entries_ = value;
}

// optional string aligner_name = 17;
inline bool AlignmentHeader::has_aligner_name() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void AlignmentHeader::set_has_aligner_name() {
  _has_bits_[0] |= 0x00002000u;
}
inline void AlignmentHeader::clear_has_aligner_name() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void AlignmentHeader::clear_aligner_name() {
  if (aligner_name_ != &::google::protobuf::internal::kEmptyString) {
    aligner_name_->clear();
  }
  clear_has_aligner_name();
}
inline const ::std::string& AlignmentHeader::aligner_name() const {
  return *aligner_name_;
}
inline void AlignmentHeader::set_aligner_name(const ::std::string& value) {
  set_has_aligner_name();
  if (aligner_name_ == &::google::protobuf::internal::kEmptyString) {
    aligner_name_ = new ::std::string;
  }
  aligner_name_->assign(value);
}
inline void AlignmentHeader::set_aligner_name(const char* value) {
  set_has_aligner_name();
  if (aligner_name_ == &::google::protobuf::internal::kEmptyString) {
    aligner_name_ = new ::std::string;
  }
  aligner_name_->assign(value);
}
inline void AlignmentHeader::set_aligner_name(const char* value, size_t size) {
  set_has_aligner_name();
  if (aligner_name_ == &::google::protobuf::internal::kEmptyString) {
    aligner_name_ = new ::std::string;
  }
  aligner_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AlignmentHeader::mutable_aligner_name() {
  set_has_aligner_name();
  if (aligner_name_ == &::google::protobuf::internal::kEmptyString) {
    aligner_name_ = new ::std::string;
  }
  return aligner_name_;
}
inline ::std::string* AlignmentHeader::release_aligner_name() {
  clear_has_aligner_name();
  if (aligner_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = aligner_name_;
    aligner_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string aligner_version = 18;
inline bool AlignmentHeader::has_aligner_version() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void AlignmentHeader::set_has_aligner_version() {
  _has_bits_[0] |= 0x00004000u;
}
inline void AlignmentHeader::clear_has_aligner_version() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void AlignmentHeader::clear_aligner_version() {
  if (aligner_version_ != &::google::protobuf::internal::kEmptyString) {
    aligner_version_->clear();
  }
  clear_has_aligner_version();
}
inline const ::std::string& AlignmentHeader::aligner_version() const {
  return *aligner_version_;
}
inline void AlignmentHeader::set_aligner_version(const ::std::string& value) {
  set_has_aligner_version();
  if (aligner_version_ == &::google::protobuf::internal::kEmptyString) {
    aligner_version_ = new ::std::string;
  }
  aligner_version_->assign(value);
}
inline void AlignmentHeader::set_aligner_version(const char* value) {
  set_has_aligner_version();
  if (aligner_version_ == &::google::protobuf::internal::kEmptyString) {
    aligner_version_ = new ::std::string;
  }
  aligner_version_->assign(value);
}
inline void AlignmentHeader::set_aligner_version(const char* value, size_t size) {
  set_has_aligner_version();
  if (aligner_version_ == &::google::protobuf::internal::kEmptyString) {
    aligner_version_ = new ::std::string;
  }
  aligner_version_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AlignmentHeader::mutable_aligner_version() {
  set_has_aligner_version();
  if (aligner_version_ == &::google::protobuf::internal::kEmptyString) {
    aligner_version_ = new ::std::string;
  }
  return aligner_version_;
}
inline ::std::string* AlignmentHeader::release_aligner_version() {
  clear_has_aligner_version();
  if (aligner_version_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = aligner_version_;
    aligner_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string version = 25;
inline bool AlignmentHeader::has_version() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void AlignmentHeader::set_has_version() {
  _has_bits_[0] |= 0x00008000u;
}
inline void AlignmentHeader::clear_has_version() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void AlignmentHeader::clear_version() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    version_->clear();
  }
  clear_has_version();
}
inline const ::std::string& AlignmentHeader::version() const {
  return *version_;
}
inline void AlignmentHeader::set_version(const ::std::string& value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(value);
}
inline void AlignmentHeader::set_version(const char* value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(value);
}
inline void AlignmentHeader::set_version(const char* value, size_t size) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AlignmentHeader::mutable_version() {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  return version_;
}
inline ::std::string* AlignmentHeader::release_version() {
  clear_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = version_;
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated string sample_basename = 30;
inline int AlignmentHeader::sample_basename_size() const {
  return sample_basename_.size();
}
inline void AlignmentHeader::clear_sample_basename() {
  sample_basename_.Clear();
}
inline const ::std::string& AlignmentHeader::sample_basename(int index) const {
  return sample_basename_.Get(index);
}
inline ::std::string* AlignmentHeader::mutable_sample_basename(int index) {
  return sample_basename_.Mutable(index);
}
inline void AlignmentHeader::set_sample_basename(int index, const ::std::string& value) {
  sample_basename_.Mutable(index)->assign(value);
}
inline void AlignmentHeader::set_sample_basename(int index, const char* value) {
  sample_basename_.Mutable(index)->assign(value);
}
inline void AlignmentHeader::set_sample_basename(int index, const char* value, size_t size) {
  sample_basename_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AlignmentHeader::add_sample_basename() {
  return sample_basename_.Add();
}
inline void AlignmentHeader::add_sample_basename(const ::std::string& value) {
  sample_basename_.Add()->assign(value);
}
inline void AlignmentHeader::add_sample_basename(const char* value) {
  sample_basename_.Add()->assign(value);
}
inline void AlignmentHeader::add_sample_basename(const char* value, size_t size) {
  sample_basename_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AlignmentHeader::sample_basename() const {
  return sample_basename_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AlignmentHeader::mutable_sample_basename() {
  return &sample_basename_;
}

// optional bool query_indices_were_permuted = 26;
inline bool AlignmentHeader::has_query_indices_were_permuted() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void AlignmentHeader::set_has_query_indices_were_permuted() {
  _has_bits_[0] |= 0x00020000u;
}
inline void AlignmentHeader::clear_has_query_indices_were_permuted() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void AlignmentHeader::clear_query_indices_were_permuted() {
  query_indices_were_permuted_ = false;
  clear_has_query_indices_were_permuted();
}
inline bool AlignmentHeader::query_indices_were_permuted() const {
  return query_indices_were_permuted_;
}
inline void AlignmentHeader::set_query_indices_were_permuted(bool value) {
  set_has_query_indices_were_permuted();
  query_indices_were_permuted_ = value;
}

// optional bool query_index_occurrences = 35;
inline bool AlignmentHeader::has_query_index_occurrences() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void AlignmentHeader::set_has_query_index_occurrences() {
  _has_bits_[0] |= 0x00040000u;
}
inline void AlignmentHeader::clear_has_query_index_occurrences() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void AlignmentHeader::clear_query_index_occurrences() {
  query_index_occurrences_ = false;
  clear_has_query_index_occurrences();
}
inline bool AlignmentHeader::query_index_occurrences() const {
  return query_index_occurrences_;
}
inline void AlignmentHeader::set_query_index_occurrences(bool value) {
  set_has_query_index_occurrences();
  query_index_occurrences_ = value;
}

// optional bool ambiguity_stored_in_entries = 36;
inline bool AlignmentHeader::has_ambiguity_stored_in_entries() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void AlignmentHeader::set_has_ambiguity_stored_in_entries() {
  _has_bits_[0] |= 0x00080000u;
}
inline void AlignmentHeader::clear_has_ambiguity_stored_in_entries() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void AlignmentHeader::clear_ambiguity_stored_in_entries() {
  ambiguity_stored_in_entries_ = false;
  clear_has_ambiguity_stored_in_entries();
}
inline bool AlignmentHeader::ambiguity_stored_in_entries() const {
  return ambiguity_stored_in_entries_;
}
inline void AlignmentHeader::set_ambiguity_stored_in_entries(bool value) {
  set_has_ambiguity_stored_in_entries();
  ambiguity_stored_in_entries_ = value;
}

// optional bool all_read_quality_scores = 40;
inline bool AlignmentHeader::has_all_read_quality_scores() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void AlignmentHeader::set_has_all_read_quality_scores() {
  _has_bits_[0] |= 0x00100000u;
}
inline void AlignmentHeader::clear_has_all_read_quality_scores() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void AlignmentHeader::clear_all_read_quality_scores() {
  all_read_quality_scores_ = false;
  clear_has_all_read_quality_scores();
}
inline bool AlignmentHeader::all_read_quality_scores() const {
  return all_read_quality_scores_;
}
inline void AlignmentHeader::set_all_read_quality_scores(bool value) {
  set_has_all_read_quality_scores();
  all_read_quality_scores_ = value;
}

// repeated .goby.ReadOriginInfo read_origin = 27;
inline int AlignmentHeader::read_origin_size() const {
  return read_origin_.size();
}
inline void AlignmentHeader::clear_read_origin() {
  read_origin_.Clear();
}
inline const ::goby::ReadOriginInfo& AlignmentHeader::read_origin(int index) const {
  return read_origin_.Get(index);
}
inline ::goby::ReadOriginInfo* AlignmentHeader::mutable_read_origin(int index) {
  return read_origin_.Mutable(index);
}
inline ::goby::ReadOriginInfo* AlignmentHeader::add_read_origin() {
  return read_origin_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::goby::ReadOriginInfo >&
AlignmentHeader::read_origin() const {
  return read_origin_;
}
inline ::google::protobuf::RepeatedPtrField< ::goby::ReadOriginInfo >*
AlignmentHeader::mutable_read_origin() {
  return &read_origin_;
}

// -------------------------------------------------------------------

// IdentifierMapping

// repeated .goby.IdentifierInfo mappings = 1;
inline int IdentifierMapping::mappings_size() const {
  return mappings_.size();
}
inline void IdentifierMapping::clear_mappings() {
  mappings_.Clear();
}
inline const ::goby::IdentifierInfo& IdentifierMapping::mappings(int index) const {
  return mappings_.Get(index);
}
inline ::goby::IdentifierInfo* IdentifierMapping::mutable_mappings(int index) {
  return mappings_.Mutable(index);
}
inline ::goby::IdentifierInfo* IdentifierMapping::add_mappings() {
  return mappings_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::goby::IdentifierInfo >&
IdentifierMapping::mappings() const {
  return mappings_;
}
inline ::google::protobuf::RepeatedPtrField< ::goby::IdentifierInfo >*
IdentifierMapping::mutable_mappings() {
  return &mappings_;
}

// -------------------------------------------------------------------

// IdentifierInfo

// required string name = 1;
inline bool IdentifierInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IdentifierInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IdentifierInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IdentifierInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& IdentifierInfo::name() const {
  return *name_;
}
inline void IdentifierInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void IdentifierInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void IdentifierInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* IdentifierInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* IdentifierInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 index = 2;
inline bool IdentifierInfo::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IdentifierInfo::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IdentifierInfo::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IdentifierInfo::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 IdentifierInfo::index() const {
  return index_;
}
inline void IdentifierInfo::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
}

// -------------------------------------------------------------------

// ReadOriginInfo

// required uint32 origin_index = 1;
inline bool ReadOriginInfo::has_origin_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReadOriginInfo::set_has_origin_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReadOriginInfo::clear_has_origin_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReadOriginInfo::clear_origin_index() {
  origin_index_ = 0u;
  clear_has_origin_index();
}
inline ::google::protobuf::uint32 ReadOriginInfo::origin_index() const {
  return origin_index_;
}
inline void ReadOriginInfo::set_origin_index(::google::protobuf::uint32 value) {
  set_has_origin_index();
  origin_index_ = value;
}

// required string origin_id = 2;
inline bool ReadOriginInfo::has_origin_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReadOriginInfo::set_has_origin_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReadOriginInfo::clear_has_origin_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReadOriginInfo::clear_origin_id() {
  if (origin_id_ != &::google::protobuf::internal::kEmptyString) {
    origin_id_->clear();
  }
  clear_has_origin_id();
}
inline const ::std::string& ReadOriginInfo::origin_id() const {
  return *origin_id_;
}
inline void ReadOriginInfo::set_origin_id(const ::std::string& value) {
  set_has_origin_id();
  if (origin_id_ == &::google::protobuf::internal::kEmptyString) {
    origin_id_ = new ::std::string;
  }
  origin_id_->assign(value);
}
inline void ReadOriginInfo::set_origin_id(const char* value) {
  set_has_origin_id();
  if (origin_id_ == &::google::protobuf::internal::kEmptyString) {
    origin_id_ = new ::std::string;
  }
  origin_id_->assign(value);
}
inline void ReadOriginInfo::set_origin_id(const char* value, size_t size) {
  set_has_origin_id();
  if (origin_id_ == &::google::protobuf::internal::kEmptyString) {
    origin_id_ = new ::std::string;
  }
  origin_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReadOriginInfo::mutable_origin_id() {
  set_has_origin_id();
  if (origin_id_ == &::google::protobuf::internal::kEmptyString) {
    origin_id_ = new ::std::string;
  }
  return origin_id_;
}
inline ::std::string* ReadOriginInfo::release_origin_id() {
  clear_has_origin_id();
  if (origin_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = origin_id_;
    origin_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string sample = 4;
inline bool ReadOriginInfo::has_sample() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReadOriginInfo::set_has_sample() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReadOriginInfo::clear_has_sample() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReadOriginInfo::clear_sample() {
  if (sample_ != &::google::protobuf::internal::kEmptyString) {
    sample_->clear();
  }
  clear_has_sample();
}
inline const ::std::string& ReadOriginInfo::sample() const {
  return *sample_;
}
inline void ReadOriginInfo::set_sample(const ::std::string& value) {
  set_has_sample();
  if (sample_ == &::google::protobuf::internal::kEmptyString) {
    sample_ = new ::std::string;
  }
  sample_->assign(value);
}
inline void ReadOriginInfo::set_sample(const char* value) {
  set_has_sample();
  if (sample_ == &::google::protobuf::internal::kEmptyString) {
    sample_ = new ::std::string;
  }
  sample_->assign(value);
}
inline void ReadOriginInfo::set_sample(const char* value, size_t size) {
  set_has_sample();
  if (sample_ == &::google::protobuf::internal::kEmptyString) {
    sample_ = new ::std::string;
  }
  sample_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReadOriginInfo::mutable_sample() {
  set_has_sample();
  if (sample_ == &::google::protobuf::internal::kEmptyString) {
    sample_ = new ::std::string;
  }
  return sample_;
}
inline ::std::string* ReadOriginInfo::release_sample() {
  clear_has_sample();
  if (sample_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sample_;
    sample_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string platform = 5;
inline bool ReadOriginInfo::has_platform() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReadOriginInfo::set_has_platform() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReadOriginInfo::clear_has_platform() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReadOriginInfo::clear_platform() {
  if (platform_ != &::google::protobuf::internal::kEmptyString) {
    platform_->clear();
  }
  clear_has_platform();
}
inline const ::std::string& ReadOriginInfo::platform() const {
  return *platform_;
}
inline void ReadOriginInfo::set_platform(const ::std::string& value) {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    platform_ = new ::std::string;
  }
  platform_->assign(value);
}
inline void ReadOriginInfo::set_platform(const char* value) {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    platform_ = new ::std::string;
  }
  platform_->assign(value);
}
inline void ReadOriginInfo::set_platform(const char* value, size_t size) {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    platform_ = new ::std::string;
  }
  platform_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReadOriginInfo::mutable_platform() {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    platform_ = new ::std::string;
  }
  return platform_;
}
inline ::std::string* ReadOriginInfo::release_platform() {
  clear_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = platform_;
    platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string library = 8;
inline bool ReadOriginInfo::has_library() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReadOriginInfo::set_has_library() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ReadOriginInfo::clear_has_library() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ReadOriginInfo::clear_library() {
  if (library_ != &::google::protobuf::internal::kEmptyString) {
    library_->clear();
  }
  clear_has_library();
}
inline const ::std::string& ReadOriginInfo::library() const {
  return *library_;
}
inline void ReadOriginInfo::set_library(const ::std::string& value) {
  set_has_library();
  if (library_ == &::google::protobuf::internal::kEmptyString) {
    library_ = new ::std::string;
  }
  library_->assign(value);
}
inline void ReadOriginInfo::set_library(const char* value) {
  set_has_library();
  if (library_ == &::google::protobuf::internal::kEmptyString) {
    library_ = new ::std::string;
  }
  library_->assign(value);
}
inline void ReadOriginInfo::set_library(const char* value, size_t size) {
  set_has_library();
  if (library_ == &::google::protobuf::internal::kEmptyString) {
    library_ = new ::std::string;
  }
  library_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReadOriginInfo::mutable_library() {
  set_has_library();
  if (library_ == &::google::protobuf::internal::kEmptyString) {
    library_ = new ::std::string;
  }
  return library_;
}
inline ::std::string* ReadOriginInfo::release_library() {
  clear_has_library();
  if (library_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = library_;
    library_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string platform_unit = 12;
inline bool ReadOriginInfo::has_platform_unit() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ReadOriginInfo::set_has_platform_unit() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ReadOriginInfo::clear_has_platform_unit() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ReadOriginInfo::clear_platform_unit() {
  if (platform_unit_ != &::google::protobuf::internal::kEmptyString) {
    platform_unit_->clear();
  }
  clear_has_platform_unit();
}
inline const ::std::string& ReadOriginInfo::platform_unit() const {
  return *platform_unit_;
}
inline void ReadOriginInfo::set_platform_unit(const ::std::string& value) {
  set_has_platform_unit();
  if (platform_unit_ == &::google::protobuf::internal::kEmptyString) {
    platform_unit_ = new ::std::string;
  }
  platform_unit_->assign(value);
}
inline void ReadOriginInfo::set_platform_unit(const char* value) {
  set_has_platform_unit();
  if (platform_unit_ == &::google::protobuf::internal::kEmptyString) {
    platform_unit_ = new ::std::string;
  }
  platform_unit_->assign(value);
}
inline void ReadOriginInfo::set_platform_unit(const char* value, size_t size) {
  set_has_platform_unit();
  if (platform_unit_ == &::google::protobuf::internal::kEmptyString) {
    platform_unit_ = new ::std::string;
  }
  platform_unit_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReadOriginInfo::mutable_platform_unit() {
  set_has_platform_unit();
  if (platform_unit_ == &::google::protobuf::internal::kEmptyString) {
    platform_unit_ = new ::std::string;
  }
  return platform_unit_;
}
inline ::std::string* ReadOriginInfo::release_platform_unit() {
  clear_has_platform_unit();
  if (platform_unit_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = platform_unit_;
    platform_unit_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string run_date = 6;
inline bool ReadOriginInfo::has_run_date() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ReadOriginInfo::set_has_run_date() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ReadOriginInfo::clear_has_run_date() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ReadOriginInfo::clear_run_date() {
  if (run_date_ != &::google::protobuf::internal::kEmptyString) {
    run_date_->clear();
  }
  clear_has_run_date();
}
inline const ::std::string& ReadOriginInfo::run_date() const {
  return *run_date_;
}
inline void ReadOriginInfo::set_run_date(const ::std::string& value) {
  set_has_run_date();
  if (run_date_ == &::google::protobuf::internal::kEmptyString) {
    run_date_ = new ::std::string;
  }
  run_date_->assign(value);
}
inline void ReadOriginInfo::set_run_date(const char* value) {
  set_has_run_date();
  if (run_date_ == &::google::protobuf::internal::kEmptyString) {
    run_date_ = new ::std::string;
  }
  run_date_->assign(value);
}
inline void ReadOriginInfo::set_run_date(const char* value, size_t size) {
  set_has_run_date();
  if (run_date_ == &::google::protobuf::internal::kEmptyString) {
    run_date_ = new ::std::string;
  }
  run_date_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReadOriginInfo::mutable_run_date() {
  set_has_run_date();
  if (run_date_ == &::google::protobuf::internal::kEmptyString) {
    run_date_ = new ::std::string;
  }
  return run_date_;
}
inline ::std::string* ReadOriginInfo::release_run_date() {
  clear_has_run_date();
  if (run_date_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = run_date_;
    run_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// AlignmentTooManyHits

// required uint32 aligner_threshold = 2;
inline bool AlignmentTooManyHits::has_aligner_threshold() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AlignmentTooManyHits::set_has_aligner_threshold() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AlignmentTooManyHits::clear_has_aligner_threshold() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AlignmentTooManyHits::clear_aligner_threshold() {
  aligner_threshold_ = 0u;
  clear_has_aligner_threshold();
}
inline ::google::protobuf::uint32 AlignmentTooManyHits::aligner_threshold() const {
  return aligner_threshold_;
}
inline void AlignmentTooManyHits::set_aligner_threshold(::google::protobuf::uint32 value) {
  set_has_aligner_threshold();
  aligner_threshold_ = value;
}

// repeated .goby.AmbiguousLocation hits = 1;
inline int AlignmentTooManyHits::hits_size() const {
  return hits_.size();
}
inline void AlignmentTooManyHits::clear_hits() {
  hits_.Clear();
}
inline const ::goby::AmbiguousLocation& AlignmentTooManyHits::hits(int index) const {
  return hits_.Get(index);
}
inline ::goby::AmbiguousLocation* AlignmentTooManyHits::mutable_hits(int index) {
  return hits_.Mutable(index);
}
inline ::goby::AmbiguousLocation* AlignmentTooManyHits::add_hits() {
  return hits_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::goby::AmbiguousLocation >&
AlignmentTooManyHits::hits() const {
  return hits_;
}
inline ::google::protobuf::RepeatedPtrField< ::goby::AmbiguousLocation >*
AlignmentTooManyHits::mutable_hits() {
  return &hits_;
}

// -------------------------------------------------------------------

// AmbiguousLocation

// required uint32 query_index = 1;
inline bool AmbiguousLocation::has_query_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AmbiguousLocation::set_has_query_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AmbiguousLocation::clear_has_query_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AmbiguousLocation::clear_query_index() {
  query_index_ = 0u;
  clear_has_query_index();
}
inline ::google::protobuf::uint32 AmbiguousLocation::query_index() const {
  return query_index_;
}
inline void AmbiguousLocation::set_query_index(::google::protobuf::uint32 value) {
  set_has_query_index();
  query_index_ = value;
}

// required uint32 at_least_number_of_hits = 2;
inline bool AmbiguousLocation::has_at_least_number_of_hits() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AmbiguousLocation::set_has_at_least_number_of_hits() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AmbiguousLocation::clear_has_at_least_number_of_hits() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AmbiguousLocation::clear_at_least_number_of_hits() {
  at_least_number_of_hits_ = 0u;
  clear_has_at_least_number_of_hits();
}
inline ::google::protobuf::uint32 AmbiguousLocation::at_least_number_of_hits() const {
  return at_least_number_of_hits_;
}
inline void AmbiguousLocation::set_at_least_number_of_hits(::google::protobuf::uint32 value) {
  set_has_at_least_number_of_hits();
  at_least_number_of_hits_ = value;
}

// optional uint32 length_of_match = 3;
inline bool AmbiguousLocation::has_length_of_match() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AmbiguousLocation::set_has_length_of_match() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AmbiguousLocation::clear_has_length_of_match() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AmbiguousLocation::clear_length_of_match() {
  length_of_match_ = 0u;
  clear_has_length_of_match();
}
inline ::google::protobuf::uint32 AmbiguousLocation::length_of_match() const {
  return length_of_match_;
}
inline void AmbiguousLocation::set_length_of_match(::google::protobuf::uint32 value) {
  set_has_length_of_match();
  length_of_match_ = value;
}

// -------------------------------------------------------------------

// AlignmentIndex

// repeated uint32 target_position_offsets = 1 [packed = true];
inline int AlignmentIndex::target_position_offsets_size() const {
  return target_position_offsets_.size();
}
inline void AlignmentIndex::clear_target_position_offsets() {
  target_position_offsets_.Clear();
}
inline ::google::protobuf::uint32 AlignmentIndex::target_position_offsets(int index) const {
  return target_position_offsets_.Get(index);
}
inline void AlignmentIndex::set_target_position_offsets(int index, ::google::protobuf::uint32 value) {
  target_position_offsets_.Set(index, value);
}
inline void AlignmentIndex::add_target_position_offsets(::google::protobuf::uint32 value) {
  target_position_offsets_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
AlignmentIndex::target_position_offsets() const {
  return target_position_offsets_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
AlignmentIndex::mutable_target_position_offsets() {
  return &target_position_offsets_;
}

// repeated uint64 offsets = 2 [packed = true];
inline int AlignmentIndex::offsets_size() const {
  return offsets_.size();
}
inline void AlignmentIndex::clear_offsets() {
  offsets_.Clear();
}
inline ::google::protobuf::uint64 AlignmentIndex::offsets(int index) const {
  return offsets_.Get(index);
}
inline void AlignmentIndex::set_offsets(int index, ::google::protobuf::uint64 value) {
  offsets_.Set(index, value);
}
inline void AlignmentIndex::add_offsets(::google::protobuf::uint64 value) {
  offsets_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
AlignmentIndex::offsets() const {
  return offsets_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
AlignmentIndex::mutable_offsets() {
  return &offsets_;
}

// repeated uint64 absolute_positions = 3 [packed = true];
inline int AlignmentIndex::absolute_positions_size() const {
  return absolute_positions_.size();
}
inline void AlignmentIndex::clear_absolute_positions() {
  absolute_positions_.Clear();
}
inline ::google::protobuf::uint64 AlignmentIndex::absolute_positions(int index) const {
  return absolute_positions_.Get(index);
}
inline void AlignmentIndex::set_absolute_positions(int index, ::google::protobuf::uint64 value) {
  absolute_positions_.Set(index, value);
}
inline void AlignmentIndex::add_absolute_positions(::google::protobuf::uint64 value) {
  absolute_positions_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
AlignmentIndex::absolute_positions() const {
  return absolute_positions_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
AlignmentIndex::mutable_absolute_positions() {
  return &absolute_positions_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace goby

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Alignments_2eproto__INCLUDED
